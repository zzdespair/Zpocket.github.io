<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="zzdespair.github.io/"/>
  <updated>2020-09-23T01:14:31.000Z</updated>
  <id>zzdespair.github.io/</id>
  
  <author>
    <name>Zzdespair</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP 安装扩展</title>
    <link href="zzdespair.github.io/2020/09/23/PHP%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95/"/>
    <id>zzdespair.github.io/2020/09/23/PHP%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95/</id>
    <published>2020-09-23T01:14:31.000Z</published>
    <updated>2020-09-23T01:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要</p><p>PHP作为我的目前工作的主力语言，在使用过程中经常会出现的问题，会在之后的文章总结归纳。</p><p>这次就记录一下PHP使用过程中最常见的扩展安装，</p><p>虽然简单，但是也有一些要注意的地方，作为参考。</p><a id="more"></a></blockquote><p><strong>默认在linux环境安装</strong></p><h3 id="解释所有命令"><a href="#解释所有命令" class="headerlink" title="解释所有命令"></a>解释所有命令</h3><h4 id="下载扩展压缩包"><a href="#下载扩展压缩包" class="headerlink" title="下载扩展压缩包"></a>下载扩展压缩包</h4><p>这里就拿mongo扩展作为实例，先到官网[<a href="http://pecl.php.net/package/mongo]下载适用于当前运行的php版本的包下载。">http://pecl.php.net/package/mongo]下载适用于当前运行的php版本的包下载。</a></p><h4 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf mongo-1.6.1.tgz //mongo-1.6.1.tgz 为压缩包的名称可替换对应的压缩包名字</span><br></pre></td></tr></table></figure><p>将下载的压缩包放在服务器内，在与压缩包同一目录下执行上述语句，进行解压。</p><h4 id="进入解压后文件"><a href="#进入解压后文件" class="headerlink" title="进入解压后文件"></a>进入解压后文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd mongo-1.6.1</span><br></pre></td></tr></table></figure><p>进入解压后的文件目录，一般和下载压缩包的名字一致</p><h4 id="PHP解析"><a href="#PHP解析" class="headerlink" title="PHP解析"></a>PHP解析</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br></pre></td></tr></table></figure><p>如果你的环境装有多版本的PHP，这里会默认使用当前环境的默认PHP版本进行解析，如果你要使用指定的进行解析而又不知道这个命令的位置，可以使用以下方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locate phpize        //查询phpize文件位置</span><br><span class="line">find / -name phpize  //如果系统没有locate方法可使用find方法</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/phpize       //系统全局指令</span><br><span class="line">/usr/local/php/bin/phpize//默认php的phpize</span><br><span class="line">/usr/local/php7.2/bin/phpize//php7.2的phpize</span><br></pre></td></tr></table></figure></blockquote><p>现在系统为默认的PHP版本是5.6，如要使用7.2的版本进行解析，直接运行下方语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/php7.2/bin/phpize</span><br></pre></td></tr></table></figure><p>运行完之后会显示一下文字</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20121113</span><br><span class="line">Zend Module Api No:      20121212</span><br><span class="line">Zend Extension Api No:   220121212</span><br></pre></td></tr></table></figure></blockquote><p>说明了当前PHP运行的版本依赖库，这里要和phpinfo中的页面内容一致</p><p><img src="/images/PHP%E6%89%A9%E5%B1%95%E6%96%87%E4%BB%B6%E5%A4%B9.jpg" alt=""></p><p>phpize是一个运行脚本，主要作用是检测php的环境还有就是在特定的目录生成相应的configure文件,这样makeinstall之后，生成的.so文件才会自动加载到php扩展目录下面。</p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>如果之前用<strong>指定版本</strong>解析或者<strong>报错</strong>的情况下，需要添加参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure -with-php-config=/usr/local/php5.5/bin/php-config</span><br></pre></td></tr></table></figure><p><code>/usr/local/php5.5/bin/php-config</code>  部分可用前面搜索phpize的方式查找到</p><h4 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><p>执行以上所有命令后，你需要修改php.ini文件，在php.ini文件中添加配置，配置如下：</p><p>extension=mongo.so</p><ul><li>重启</li></ul><p>记得重启php！</p><h3 id="所有命令整合"><a href="#所有命令整合" class="headerlink" title="所有命令整合"></a><strong>所有命令整合</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf xdebug-2.9.6.tgz                解压</span><br><span class="line">cd xdebug-2.9.6     进入目录</span><br><span class="line">phpize7.2  使用指定PHP版本解析</span><br><span class="line">sudo ./configure -with-php-config=/usr/bin/php-config7.2              使用指定PHP版本检测</span><br><span class="line">sudo make&amp;&amp; sudo make install                                         测试安装</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要&lt;/p&gt;
&lt;p&gt;PHP作为我的目前工作的主力语言，在使用过程中经常会出现的问题，会在之后的文章总结归纳。&lt;/p&gt;
&lt;p&gt;这次就记录一下PHP使用过程中最常见的扩展安装，&lt;/p&gt;
&lt;p&gt;虽然简单，但是也有一些要注意的地方，作为参考。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="PHP" scheme="zzdespair.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>决策的故事-李宁和安踏</title>
    <link href="zzdespair.github.io/2020/09/10/%E5%86%B3%E7%AD%96%E7%9A%84%E6%95%85%E4%BA%8B-%E6%9D%8E%E5%AE%81%E5%92%8C%E5%AE%89%E8%B8%8F/"/>
    <id>zzdespair.github.io/2020/09/10/%E5%86%B3%E7%AD%96%E7%9A%84%E6%95%85%E4%BA%8B-%E6%9D%8E%E5%AE%81%E5%92%8C%E5%AE%89%E8%B8%8F/</id>
    <published>2020-09-10T01:14:31.000Z</published>
    <updated>2020-09-10T01:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要</p><p>有时候在正确的时候做正确的决定，是更关键的事情              </p><p>生活中不缺乏机遇，你的层次越高，眼见越高，看见的机遇越多</p><a id="more"></a></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>作者：IC实验室馆长<br>链接：<a href="https://www.zhihu.com/question/37296063/answer/1461108165">https://www.zhihu.com/question/37296063/answer/1461108165</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>聊聊我一直想聊的两个品牌，<strong>安踏和李宁。</strong></p><p>前几天，安踏市值突破2200亿港币，创下历史新高。去年面对浑水连续数轮沽空报告，股价不跌反涨。一转眼，中国第一运动品牌这个皇冠，安踏已经戴了8年。</p><p><img src="https://pic1.zhimg.com/80/v2-1017660661fc12108dbb9e87889fd2ec_720w.jpg?source=1940ef5c" alt=""></p><p>另一边，李宁这家公司在今年迎来了自己的30岁生日。曾经的王者在经历了一段漫长的迷茫期之后，终于找回了自己的节奏，重新向王座发起冲击。</p><p>这两家体育品牌的命运一度平行，又一度交织。相爱相杀，互为表里，各自代表一类战略模式。</p><p>由于故事太长，<strong>我会从历史发展、赞助争夺和战略差异上，聊一聊这场绵延30年的中国第一运动品牌之战。</strong></p><p><strong>第一章：穷小子vs富二代</strong></p><p>1984年， 洛杉矶奥运会上，一位叫做李宁的中国体操运动员，单枪匹马拿下三金两银一铜，接近中国代表团奖牌总数的1/5。</p><p><img src="https://pic2.zhimg.com/50/v2-939238e980ab173688a492653d4af3dd_hd.jpg?source=1940ef5c" alt=""></p><p>那一年，是中国代表团时隔32年重返奥运，国人热切期盼中国代表团能在奥运赛场上摘金夺银。李宁的精彩表现，振奋了全国人民，他被誉为「体操王子」，<strong>甚至可以说，李宁本人就是中国体育史上第一个个人IP。</strong></p><p>4年后，折戟汉城奥运的李宁选择了退役，在健力宝老总李经纬的盛情邀请下，成为了李经纬的特别助理，很快，在李经纬的帮助下，李宁创立了李宁品牌。</p><p><img src="https://pic1.zhimg.com/50/v2-b146d8d26697cee21e94d6d785fe35db_hd.jpg?source=1940ef5c" alt=""></p><p>李宁公司诞生30年前，却像一家站在风口上的创业公司一样：有一个光环笼罩的明星创业者，既没有产品也没有工厂，就得到了当时如日中天的健力宝集团1600万元的投资，还坐拥最顶级的市场资源，以及一片蓝海的运动鞋服市场。</p><p>一开局，手上就是一把王炸。</p><p>李宁豪横到什么程度呢？<strong>1990年，刚刚创立的李宁就盯上了北京亚运会火炬接力的服装赞助权。</strong></p><p>亚运会方面狮子大开口，要了300万美元的天价赞助费，李宁当然不愿被当成冤大头，便和对方谈判：</p><p>我这个奥运冠军，最大的遗憾就是没有穿自己国家的领奖服站上领奖台。咱们国家的企业，哪个能出得起这个钱？我们已经是最有钱的了，你就卖给我们吧。</p><p>一手民族牌，一手感情牌，加上创始人本人的光环加持，还不到一岁的李宁公司，只花了250万人民币，就赞助了亚运会圣火传递指定服装、中国国家代表队参加亚运会领奖服及中外记者的指定服装。</p><p><strong>伴随亚运圣火传递，白色李宁牌运动服出现在人们面前，李宁品牌横空出世。</strong></p><p><img src="https://pic3.zhimg.com/50/v2-7359aae923cdd4f86e0f0ff64f42b11f_hd.jpg?source=1940ef5c" alt=""></p><p>1992年，李宁被选为巴塞罗那奥运会中国代表团指定领奖服装、领奖鞋，结束了中国运动员在奥运会上使用外国体育用品的历史。</p><p><strong>连续4届奥运会，中国奥运代表团都身着李宁运动服登上领奖台。</strong></p><p><img src="https://pic4.zhimg.com/50/v2-d6cc541ebd85d3777c9184311b75acf5_hd.jpg?source=1940ef5c" alt=""></p><p>90年代中期，在市场化的浪潮下，资历更老的青岛双星和上海飞跃不断衰落，到了1995年左右，李宁已经坐稳了中国第一体育品牌的位置。</p><p><strong>如果说李宁是含着金汤匙出身的天之骄子，那么安踏就是从底层爬起的草根。</strong></p><p>不知道多少同学和我一样有体会，就是我们的爸妈都喜欢把运动鞋叫做<strong>「旅游鞋」</strong>。在八九十年代，专业运动还不那么普及的时候，旅游爬山可能是最普及的全民运动之一，旅游鞋这个叫法也被传开了。</p><p>而那个年代的「旅游鞋」，有一大批都来自晋江。</p><p>晋江制鞋业，从每家每户的小作坊起步。到后来，大到外国的耐克，小到国内的双星，火炬牌，都在晋江设厂生产。</p><p>但晋江人不做销售，也没有自己的品牌，于是出现了一个很奇怪的现象：全国上下都在卖晋江鞋，唯独自己造鞋的晋江没有赚到大钱。</p><p>于是，有一群人想做出改变。</p><p>1987年，17岁的<strong>丁世忠</strong>拿了家里鞋厂的10000块钱，在当地购买了600双鞋，单枪匹马跑去了北京卖鞋。</p><p><img src="https://pic4.zhimg.com/50/v2-1ad2006294ddf8bc7c5f95d5dec52e65_hd.jpg?source=1940ef5c" alt=""></p><p>为了把货卖到北京西单商场，他天天去拜访商场负责人，连着跑了一个月，终于打动了商场负责人。</p><p><img src="https://pic3.zhimg.com/50/v2-820cb4f83be85b6a83c00521ee05d09d_hd.jpg?source=1940ef5c" alt=""></p><p>两年的时间，丁世忠靠着一家家跑业务，为晋江鞋拿下了包括王府井商场在内，北京各大商场的柜台。</p><p>1991年，新生的李宁牌已经在全国范围内打出了名气，而丁世忠带着在北京闯荡4年赚到的20万，回到晋江开始创业办厂，安踏就此起步。</p><p>差不多同一时代，特步、361度、匹克、鸿星尔克、德尔惠等等品牌也先后成立，成为了中国体育品牌的<strong>「晋江帮」</strong>。</p><p><img src="https://pic3.zhimg.com/50/v2-2059a4d5ed203298a7bb038c9b2bc1ef_hd.jpg?source=1940ef5c" alt=""></p><p>初生的安踏，一边像一家典型的晋江鞋企一样，老老实实做海外代工，另一边则在慢慢建立自己的销售渠道。</p><p>只是在品牌层面，安踏还名不见经传，别说李宁，甚至不如晋江老乡匹克，只能算是弟中弟。</p><p>但就是这么个弟弟品牌，早早地盯上了李宁大哥的宝座。</p><p><strong>当渠道逐渐成熟，安踏决定向李宁发起第一次冲锋。</strong></p><p>根据营销行业著名的定位理论，品牌应当在目标顾客心目中占有一个独特的、有价值的位置。每个品牌，都应当做出自己的差异化。</p><p>但在国产运动品牌中，李宁已经牢牢地占据了心智，安踏怎样能做出自己的差异化呢？</p><p>安踏决定打「个性」牌。你李宁是80年代的中国体育领军人物。如今快到新世纪了，我们也需要一个全新的体育偶像。</p><p><strong>这个偶像，安踏选择的是孔令辉。</strong></p><p><img src="https://picb.zhimg.com/50/v2-2bffcecdc3a1a33d55dad40499912213_hd.jpg?source=1940ef5c" alt=""></p><p>稍微年轻一点的同学可能对孔令辉不太熟悉。作为国乒队一哥，孔令辉不仅战绩辉煌，长相也是清瘦帅气，下至少女上至阿姨，是全国女性的梦中情人。论国民度，张继科加上马龙，估计都很难和当时的孔令辉相提并论。</p><p><img src="https://picb.zhimg.com/50/v2-3559ef09131ae1e08bb2319cf5c273ba_hd.jpg?source=1940ef5c" alt=""></p><p>请孔令辉代言，就是安踏对李宁的冲锋，更确切的说，是自杀式冲锋。</p><p>当时，安踏一年的利润只有400万，而请孔令辉代言，要花掉五分之一的年利润，算上投放央视的广告费，一年的利润就花得干干净净了。</p><p>安踏上下对此意见不一，最后还是丁世忠，一句<strong><em>「是知道安踏的人多，还是知道孔令辉的人多？」</em></strong>力排众议。</p><p>安踏这一波，确实有赌的成分。但事后看来，这笔钱可能是安踏历史上性价比最高的一次押宝。</p><p>2000年悉尼奥运会，孔令辉在男单决赛中战胜瑞典「常青树」瓦尔德内尔赢得金牌，<strong>获胜后孔令辉激动地亲吻球衣上国旗的一幕成为一代人心中的经典镜头。</strong></p><p><img src="https://pic1.zhimg.com/50/v2-97893471265817fd079f8ee170558ad1_hd.jpg?source=1940ef5c" alt=""></p><p>伴随着奥运的热潮，安踏制作的广告也登上了央视，孔令辉对着镜头，说出安踏的广告语<strong>「我选择，我喜欢」</strong>。</p><p><img src="https://pic3.zhimg.com/50/v2-eae6ef287ca5a8dd66ec83eaf2f82bfa_hd.jpg?source=1940ef5c" alt=""></p><p>你仔细想想，安踏不就是拐弯抹角地在说「别选李宁」嘛。</p><p>这句耳熟能详的经典广告语，还暗藏另一个玄机。</p><p>1999年，李宁签约了当红名模瞿颖，喊出了口号：「我运动，我存在」。</p><p><strong>安踏的「我选择，我喜欢」，正是对标李宁的广告语创作的。而且更加符合年轻人的口吻，在那个追求个性独立的时代牢牢抓住了受众的心。</strong></p><p>更别说瞿颖作为一个娱乐明星，无论是知名度还是品牌契合度，和孔令辉都是天壤之别。</p><p>一夜之间，安踏品牌席卷全国，当年营业额从2千多万飙升到2个亿，完成了一次默默无闻到路人皆知的蜕变。</p><p>从营销角度看，李宁没做错什么，顶多是保守了一些。<strong>但疯狂的竞争对手会抓住一切你做的不够好的地方来攻击你超越你，商业世界就是这么残酷。</strong></p><p>大品牌坐拥大量资源没错，但船大难掉头，保守是几乎每个大牌都逃不过的通病。穷小子想要打败富二代，需要的就是「赌一把」的勇气。</p><p>此时，安踏的野心已经慢慢浮现。</p><p><strong>第二章：偷袭CBA</strong></p><p>有了知名度做基础，安踏趁热打铁，开始捡漏李宁手上的资源。</p><p>2004年，中国职业男子篮球联赛，也就是CBA开启了新一轮的招商。</p><p><img src="https://pic1.zhimg.com/50/v2-67e6f433688d6b8d652f46152f806703_hd.jpg?source=1940ef5c" alt=""></p><p>彼时的CBA，经历了1999年各队反耐克运动，以及各队自行招商时代留下的烂摊子，加上姚明赴美征战，让全国人民的目光转向了大洋彼岸的NBA。CBA的商业前景完全不被看好。</p><p>在篮协召开的招商会上，备受期待的鞋类和服装类合作伙伴，<strong>标价仅每年1000万，仍无人问津。</strong></p><p>新赛季即将开赛，却没有装备赞助商，眼看着球员们要没有球鞋球衣上场比赛之时，CBA掌门人李元伟只好亲自带着方案，出面拜访耐克、阿迪和李宁，希望邀其入场。</p><p>当时的李宁早已把目标放在了国际市场和NBA，在CBA市场，李宁只想花点小钱，赞助个别明星球员，而不是全面和CBA合作，于是委婉地拒绝了李元伟。耐克和阿迪那里，李元伟同样吃了闭门羹。</p><p><strong>就在这时，安踏站了出来，而且一出手就是3年6000万，比篮协的报价高了一倍。据说李元伟在安踏公司只聊了一个小时，就敲定了合作，安踏的爽快可见一斑。</strong></p><p>为了回报仗义疏财的安踏，CBA主动将「鞋类和服装类合作伙伴」的权益升级为「CBA唯一指定运动装备」赞助商。全联盟都必须穿安踏的球衣球鞋。有个人代言的球员，必须交一笔「赎脚费」才能穿其他品牌的鞋，还得用胶布遮住品牌logo。</p><p><img src="https://pic4.zhimg.com/80/v2-3dce9e2010b71527afc61ff083b10607_720w.jpg?source=1940ef5c" alt=""></p><p>也就是说，李宁本打算靠签约球星在CBA保持存在感的小算盘，被安踏直接赶尽杀绝。</p><p>安踏一赞助就是8年。这8年里CBA给安踏带来了巨大的回报。从2004年到2008年，安踏的销售额，几乎每年都以翻倍的速度增长。</p><p>此外，安踏还抢了李宁的中国大学生篮球联赛CUBA的赞助。</p><p><img src="https://pic2.zhimg.com/50/v2-24c4c3e6c0d11e5efbefd17de24b24ee_hd.jpg?source=1940ef5c" alt=""></p><p>这件事，让当年拒绝CBA的李宁几乎悔青了肠子。直到8年后，他们才用5年20亿的价格从安踏手里夺过CBA。8年，价格翻了20倍，但中国体育市场早已不是那个蓝海，李宁错过了最好的时机。</p><p><img src="https://pic2.zhimg.com/50/v2-f196a224f3125bb2277327a355a4840f_hd.jpg?source=1940ef5c" alt=""></p><p>尼尔森体育发布的<strong><em>《2018世界足球报告》</em></strong>中指出，超过51%的足球爱好者会更加青睐喜爱球队品牌赞助商的产品。其实篮球也是同理，球队，球员本身就是超级IP，拿下之后可以大大增强品牌知名度和目标消费者好感度。</p><p><img src="https://pic4.zhimg.com/50/v2-6659d0b548a6df6bbf05aaac6f9dafac_hd.jpg?source=1940ef5c" alt=""></p><p>通过和CBA的合作，安踏褪去晋江土财主的面貌，越来越像一家正规、专业的体育品牌。</p><p>抢了CBA还不够，安踏还开始抢占李宁的低端市场。</p><p>当时的国产运动品牌存在着明显的三档市场。耐克阿迪占据最高端，几乎不涉足低价市场；李宁占据中端，跃跃欲试想要往上爬。</p><p>而在低端市场上，通过央视广告战，安踏领衔的一众晋江品牌逐渐侵蚀了李宁的市场份额。</p><p>某种程度上，安踏是一个很清楚自己几斤几两的企业。<strong>他们将主力消费人群的形象描绘为月收入5000元左右的上班族，大学生，运动爱好者，居住在三四线城市为主。</strong></p><p><img src="https://pic4.zhimg.com/50/v2-8b8694a64962f4de51f0daa1dc7dbfcf_hd.jpg?source=1940ef5c" alt=""></p><p>安踏的门店也迎合了这个分布。</p><p>为了战胜李宁，安踏展开了一场终端管理改革。</p><p>一方面，安踏开始引导零售商将安踏专柜改为安踏专卖店，引入严格的店铺管理规定，统一门店视觉和服务。另一方面，安踏引入狼群战术，大规模开店，甚至不惜在同一商圈里经营多家安踏专卖店，对李宁专卖店形成围剿之势。</p><p><strong>最重要的是，安踏展开了终端回购计划，投入巨额资金将大量门店收归旗下，改为直营。这一手，成为了未来安踏超越李宁的最重要的伏笔。</strong></p><p>顺便说一下，安踏是一个很会埋伏笔的公司。在后面，你就会看到这些伏笔会一一成为对抗李宁的利器。</p><p>产品端，安踏也研究了三四线城市的用户需求，将性价比作为品牌卖点。</p><p>举个例子，在三四线城市或者乡村，许多地方只有粗糙的水泥地球场。中国有近80%的篮球鞋消费者都是在水泥地打篮球。</p><p><img src="https://pic1.zhimg.com/50/v2-b996545644c448c0660eb7a196412fa5_hd.jpg?source=1940ef5c" alt=""></p><p>耐克阿迪的主力鞋款，都只能打塑胶球场和木质室内场，打几场水泥场，鞋底就磨穿了。至于昂贵的AJ，根本不舍得穿上水泥球场。</p><p>但是安踏反其道行之，推出了以耐磨为卖点的水泥杀手等一系列球鞋。有一段时间，提到水泥，我的第一反应就是安踏。</p><p><img src="https://pic2.zhimg.com/50/v2-7976ae16b51e08cfa260ea3552929e1f_hd.jpg?source=1940ef5c" alt=""></p><p>就这样，在李宁试图下克上逆袭阿迪耐克之时，原本属于李宁的下沉市场，被安踏疯狂蚕食。五环外市场这条现金牛，成为了安踏未来多品牌战略的基础。</p><p>富二代李宁看不上的那些资源，轻易抛弃掉的地盘，穷小子安踏毫不挑食，全部纳入旗下。08年北京奥运会之前，安踏在资本层面，已经拥有和李宁掰一掰手腕的实力。</p><p><strong>接下来要做的，就是安静等待，等一个对手犯错的机会。</strong></p><p>而李宁没有让安踏等太久。</p><p><strong>第三章：错误的抉择</strong></p><p>前面讲了这么多安踏逆袭李宁的故事，李宁真的做得很差吗？</p><p>不，恰恰相反，李宁在品牌上，几乎做到了前无古人，后无来者的地步。安踏如今不可一世，论品牌力也远远不及李宁。</p><p><strong>李宁的强大，很大程度上得益于商业上一连串正确的抉择。</strong></p><p>回顾早年的李宁，就像看宫斗权谋剧里的主角一样，每个决定都恰好踩在点上。</p><p>品牌创立之初，李宁就坚持不做健力宝的独资子公司，而是引入外资，独立运营。1996年，李宁接受职业经理人的建议，与健力宝公司切断关系，赎回股份。</p><p>后来，健力宝和众多国企一样，陷入了所有权争夺，在不断的官司和扯皮中，不仅品牌价值荡然无存，创始人李经纬也锒铛入狱，最终在2013年郁郁而终。</p><p><img src="https://pic4.zhimg.com/50/v2-3f6c4da962de66a91c444f8b7475744b_hd.jpg?source=1940ef5c" alt=""></p><p><strong>李宁这一手操作，让公司跳下了这艘快要沉没的巨轮，避免了跟健力宝一起衰落的厄运。</strong></p><p>在公司运营上，李宁早早地劝退了亲戚朋友，自己也退出一线，将公司交到职业经理人的手上，把家族企业成功转型成为现代化的公司。最终在2004年成功上市。</p><p>在营销上，李宁放弃了娱乐营销，专注体育，而且找到了篮球这个主营品类。2002年，李宁喊出Anything is possible<em>（一切皆有可能）</em>的经典slogan。</p><p><img src="https://pic3.zhimg.com/50/v2-4eb81a566eac6e9976e05c06c0af49b2_hd.jpg?source=1940ef5c" alt=""></p><p><strong>顺便说一句，这句slogan不是抄袭阿迪达斯，「没有不可能」的出现要等到两年后了。</strong></p><p>在国际化上，李宁先后赞助了法国体操队、阿根廷男篮、瑞典和西班牙奥运代表团，成为了NBA和ATP<em>（国际男子职业网球选手联合会）</em>的官方市场合作伙伴，签约了NBA球员达蒙·琼斯和沙克·奥尼尔，成为第一个出现在NBA赛场上的中国球鞋品牌，还在欧洲9个国家拓展了特许经销商。</p><p><img src="https://pic1.zhimg.com/50/v2-cef8b581987ecd2c73b859d6d0758dbf_hd.jpg?source=1940ef5c" alt=""></p><p>最骚的是，2008年，李宁在波特兰设立了研发中心，直接把公司开到了Nike家的老巢里。</p><p><img src="https://pic1.zhimg.com/50/v2-17214ecd639e2c6115a43c515356fa3b_hd.jpg?source=1940ef5c" alt=""></p><p>可以说李宁的目标，是打造一个属于中国的全球化运动品牌，对标耐克阿迪。它的基本盘在国内，但视野却在全球，自然没有把安踏放在眼里。</p><p>而安踏，几乎照着李宁走过的路，重新走了一遍。同样去家族化引入职业经理人，同样选择篮球作为主营品类，同样放弃了娱乐营销。</p><p>比起李宁，安踏「永不止步」的slogan晚了4年，国际化晚了2年，港股上市晚了3年。</p><p><img src="https://pic2.zhimg.com/50/v2-afae141335679f4052a6433be624a03b_hd.jpg?source=1940ef5c" alt=""></p><p>穷小子就像是富二代的门徒，亦步亦趋。</p><p>李宁这个品牌，总给人一种天选之子的感觉。</p><p>00年代对中国体育来说，是美妙的黄金10年，申奥成功让中国体育产业发展进入了一条快车道，而李宁作为中国奥委会多年赞助商，也顺理成章，成为了民族品牌的代表。</p><p><strong>2008年，伴随着李宁先生高举奥运圣火在空中环绕鸟巢一周，点燃北京奥运会主火炬，更是让李宁品牌价值也来到了最高点。</strong></p><p><img src="https://pic4.zhimg.com/50/v2-31c57b88ba367351000b97d7ffa74ce5_hd.jpg?source=1940ef5c" alt=""></p><p>北京奥运会，虽然中国代表团的赞助被阿迪达斯抢走，但李宁反手就赞助了中国乒乓球队、体操队、跳水队和射击队四支夺金「梦之队」，还拿下了央视奥运服装独家赞助权，关注度一点也没落下。</p><p>第二年，李宁在中国内地销售额反超阿迪，成为了中国市场第二，本土第一名的品牌。市值也一路飚到创新高的500亿。</p><p><img src="https://pic3.zhimg.com/50/v2-0bc898ac9575f9b8d040168f7d693bd8_hd.jpg?source=1940ef5c" alt=""></p><p>股市有句俗话，利好出尽，就是利空。</p><p><strong>从历史上看，每一个王朝的衰败，强大的敌人固然是催化剂，但核心主因，一定来自内部。</strong></p><p>北京奥运的热度并没有延续下去，反而一定程度上透支了中国消费者对体育的热情，奥运结束后，运动鞋服的消费逐渐恢复正常。</p><p>而大多数品牌没能看到这点，奥运会前，中国已经诞生了15个门店数超过3000家的体育品牌，李宁、安踏、特步、361 度、匹克在奥运会前后纷纷上市。</p><p>市场饱和伴随消费下降，产生了大量盈利能力低下的门店和大量剩余库存，整个行业进入了为期4年的寒冬，而导致这场寒冬的，就是四个字<strong>「库存危机」。</strong></p><p><strong>此刻李宁，在最错误的时间，做出了最错误的抉择。</strong></p><p>2010年，意识到品牌开始老化的李宁，启动了一次极为彻底的品牌重塑运动。</p><p>这场运动史称「90后李宁」，主要的举措包括：</p><p><strong><em>1、在一切皆有可能的基础上提出了新slogan：「Make the change让改变发生」</em></strong></p><p><img src="https://pic3.zhimg.com/50/v2-8272f2638990bdd583a7c7a8823b6e61_hd.jpg?source=1940ef5c" alt=""></p><p><strong><em>2、提出90后李宁概念，拥抱年轻人，时尚化。</em></strong></p><p><img src="https://pic4.zhimg.com/50/v2-3621bd45027a70ee59a96eb6ac741f6a_hd.jpg?source=1940ef5c" alt=""></p><p><strong><em>3、提高价格，将重心放到一线城市与耐克阿迪正面开战</em></strong></p><p><strong><em>4、换掉了沿用20年的李宁logo</em></strong></p><p>企业做错一个决策很正常，难的是一口气连着做错4个决策：</p><p>首先，「让改变发生」是一个英文化的表达，读起来十分拗口，和「一切皆有可能」比起来，一个天上一个地下。</p><p>其次，当时最年长的90后才20岁，还未形成完整的消费力，年轻人也更认可阿迪耐克。李宁看似拥抱了90后，其实反过来抛弃了陪着李宁长大，最死忠的70后、80后消费者。</p><p>再次，提价不代表提档次，更不代表你能和国际大牌对抗，高端品牌向下兼容容易，中端品牌向上兼容很难，李宁长期定位中端，没有提价的资本，一线没有涨起来，三四线市场彻底崩盘。</p><p>最后，在库存大量堆积的情况下换新logo，等于直接报废一批原有产品，激化库存问题。</p><p>其中尤以第四点最为致命。<strong>李宁说到底还是一个服装公司，服装行业最重要的就是低库存，高周转，才能把成本收回来。李宁的库存周转时长几乎达到安踏的2倍，庞大的库存让终端加盟商失去了进新货的动力，</strong></p><p>我个人从那时起就很少逛李宁门店了，因为杂志上再漂亮的新款战靴，店里也买不到。</p><p>屋漏偏逢连夜雨，李宁的背运还没完。李宁在西班牙的授权生产商宣告破产，波特兰设计中心雇员流失，与美国合作伙协议终止，李宁轰轰烈烈的国际化宣告失败。</p><p><img src="https://pic4.zhimg.com/50/v2-00c6ecb1c0b41a134cd9e41e9fd53790_hd.jpg?source=1940ef5c" alt=""></p><p>正巧也是那时开始，鞋类垂直电商开始进入中国，国际大牌的产品价格一下子被打了下来。</p><p>2011年起，李宁营收开始进入连年下滑，2011年当年亏损近20亿，此后三年持续亏损，也开始了大规模的关店。</p><p>步子迈大了，你问过蛋吗？</p><p>回顾「90后李宁」战略，你觉得它是错误的吗？显然不是，甚至可以说，李宁及早布局转型，是相当有远见的决策。</p><p>但当正确的策略发生在错误的时间，它就是错的。</p><p>成于战略，败于战略，不作不死，令人唏嘘。</p><p>而此时，一直在等待李宁犯错的安踏，终于意识到机会来了。</p><p><img src="https://pic3.zhimg.com/50/v2-a151fc1798bd598b9d1049c1252d05bc_hd.jpg?source=1940ef5c" alt=""></p><p>穷小子奋斗了十八年，终于和富二代坐上了同一张赌桌。</p><p>下面的内容，我将从安踏的三个伏笔讲起，讲述这个10年里，<strong>在全新的消费大环境下，安踏与李宁如何在营销和战略上展开攻防，演绎出一场荡气回肠的消费战争。</strong></p><p><strong>第四章：体育品牌中的大众</strong></p><p>前面我们说到李宁犯了一个战略上的错误，<strong>在不正确的时间进行品牌重塑，不仅受累于库存压力，还因此丢失了一大波基本盘，最终让安踏抓住机会，一举超越李宁。</strong></p><p>但要注意的是，品牌重塑这个策略本身并没有问题。</p><p>李宁的野心不止于国内，服装行业本身也不是什么高门槛行业，作为不少大牌生产基地的中国，<strong>怎么就不能有属于自己的，国际体育大牌呢？</strong></p><p><img src="https://pic2.zhimg.com/50/v2-e7bd44bad13f1eb344740f3e3442ce48_hd.jpg?source=1940ef5c" alt=""></p><p>显然当时李宁眼中的敌人是耐克、阿迪这种大佬玩家，但是凭借李宁当时的定位，无论如何是无法与两者抗衡的。<strong>在消费者眼中，李宁的品牌形象，始终低于耐克、阿迪。</strong></p><p><strong>这使得李宁迫切地进行品牌升级，期望在品牌价值、产品价格上对标国际巨头，以迅速追赶差距。</strong>如果我们把自己放在当时的时间节点去看，李宁的策略不无道理。</p><p>李宁在老一辈眼中的形象已然固定，要想对标耐克、阿迪，只有不破不立这一条路子。<strong>于是李宁选择放弃原有的消费群体，把赌注压在当时年轻的90后身上，希望利用几年营销，在年轻人中重塑李宁的品牌形象。</strong></p><p><img src="https://pic1.zhimg.com/50/v2-13031ab16899f4308bbe43918a9a61b4_hd.jpg?source=1940ef5c" alt=""></p><p>问题在于李宁还是低估了品牌重塑的难度，这个代价显然过于惨重了。<strong>这个选择可以说是一场豪赌，用多年积累的资源，赌未来的爆发。</strong>结果不仅没有拉近自己和耐克、阿迪的举例，相反被同行安踏摘了桃子。</p><p>人们对于品牌，尤其是服装品牌的固有印象是非常难以改变的，这种品牌升级的成功案例极少，相反沦为笑柄的惨案倒是挺多。</p><p><strong>一个著名案例就是美特斯邦威。</strong>当时美特斯邦威赞助了国内雷剧鼻祖<strong>《一起来看流星雨》</strong>，企图通过这么一部偶像剧蹭一波流量，没曾想端木磊带楚雨荨去美特斯邦威买衣服成了名场面，被嘲笑至今。</p><p><img src="https://pic4.zhimg.com/50/v2-d4afaa2de31dd1c3d925007d7b4dee23_hd.jpg?source=1940ef5c" alt=""></p><p>当然美邦也不是没为品牌升级做过其他努力，早在《一起来看流星雨》上映前一年，美邦就开了一条名为ME&amp;CITY的「高端线」。</p><p><img src="https://pic1.zhimg.com/50/v2-fd0defd6db0625c7d2209b7f598de9be_hd.jpg?source=1940ef5c" alt=""></p><p>毕竟随着国人审美、消费的提高，服装品牌继续保持原有调性是很可能被淘汰的。</p><p>所以这些年服装品牌都在更换设计，美邦的竞争对手森马、贵人鸟都是如此。而一直佛系的真维斯，就在去年倒闭了。</p><p><img src="https://pic1.zhimg.com/50/v2-14a72099c16b954f766b5df34f143c36_hd.jpg?source=1940ef5c" alt=""></p><p>同样颇具野心的安踏当然也意识到了这个问题，不过相比李宁，安踏在人们心中更是廉价的代表。<strong>李宁做不到的事，安踏更加做不到。</strong></p><p><img src="https://pic1.zhimg.com/50/v2-f473b864b99e3240acff99db8e34b5cf_hd.jpg?source=1940ef5c" alt=""></p><p>所以安踏选择了另一条道路：<strong>多品牌策略。</strong></p><p>多品牌策略是指企业根据各目标市场的不同消费者诉求，分别使用不同品牌的品牌决策策略。</p><p><img src="https://pic1.zhimg.com/50/v2-99daf08e741ee3a8faf3e37d74ec13a9_hd.jpg?source=1940ef5c" alt=""></p><p><strong>多个品牌能较好地定位不同利益的细分市场，强调各品牌的特点，吸引不同的消费者群体，从而占有较多的细分市场。</strong></p><p>我在第一次消费战争中，就提过这个策略，无论是宝洁，还是联合利华，都是多品牌策略的高端玩家。</p><p><img src="https://pic1.zhimg.com/50/v2-adba13e29b000f40c6461172eed253c4_hd.jpg?source=1940ef5c" alt=""></p><p><strong>这种策略的好处是显而易见的，既然我原本的品牌形象已经固化了，那我就再开个小号进攻其他市场不就行了？</strong></p><p>唯一的问题在于，重新运营一个全新的品牌，是一件非常困难的事情。于是安踏使用了绝招：买。</p><p>2009年，安踏从百丽手里收购了<strong>FILA品牌在</strong>中国的商标使用权和专营权。</p><p>当时这个来自意大利的高端运动品牌还处于连年亏损中。</p><p><img src="https://pic1.zhimg.com/50/v2-0a18a732c38d797411a294da3b58b80e_hd.jpg?source=1940ef5c" alt=""></p><p><strong>但安踏没有急于让这个品牌贡献业绩，而是慢慢改造它，将专业运动的部分剥离，保留时尚休闲的元素。</strong></p><p><img src="https://pic1.zhimg.com/50/v2-8eb865099db71f5270c6d21201a23abc_hd.jpg?source=1940ef5c" alt=""></p><p>FILA没有辜负安踏多年的耐心培育，<strong>从2016年开始，FILA逐渐显示出在高端市场独当一面的品牌力，虽然规模只有安踏十分之一，但利润率远超母品牌。</strong></p><p><img src="https://pic2.zhimg.com/50/v2-1a602ab9f4750bc287c16478d82f2d6c_hd.jpg?source=1940ef5c" alt=""></p><p>在运动时尚的风潮下，FILA展现了极强的品牌力，迅速成为了一二线城市消费者的新宠。</p><p><strong>如今，FILA已经代替了在三四线城市接近饱和的安踏，成为了这家公司全新的业绩增长引擎。</strong></p><p>根据最新的数据，在疫情情况下，FILA 品牌上半年收入逆市上涨 9.4%，达到71.52 亿元，占安踏集团48.8%。</p><p><img src="https://pic2.zhimg.com/50/v2-2f88c4ac8b2a294686f8a4f59b00e730_hd.jpg?source=1940ef5c" alt=""></p><p>我的一位研究体育商业的朋友，甚至用「<strong>阵中最强之人</strong>」来形容FILA。</p><p>除了FILA，安踏还在去年斥资350亿收购了<strong>亚玛芬体育</strong>，而安踏2018年的营收也不过241亿，可谓蛇吞象的壮举，颇有当年请孔令辉代言的雄心。</p><p><img src="https://picb.zhimg.com/50/v2-7ef315ba55594ba1fd7d57545175606e_hd.jpg?source=1940ef5c" alt=""></p><p>成立于1950年的亚玛芬体育旗下有包括始祖鸟、Wilson在内的13个品牌，涵盖网球、滑雪、登山等多个体育领域。其中Wilson更是代替斯伯丁成为今年NBA官方用球。</p><p><img src="https://pic1.zhimg.com/50/v2-07e202ac2798d0924bd02bf99d0900cc_hd.jpg?source=1940ef5c" alt=""></p><p><strong>如今的安踏，更像是体育界的大众，通过收购的方式，运用多品牌策略，让自己的体育帝国版图继续扩张。</strong></p><p>当然，安踏在FILA上的成功，是否能复制到亚玛芬上，还需要时间来检验。</p><p><strong>第五章：国牌之战</strong></p><p>虽然安踏已然成为一个庞然大物，但李宁也并非吃素的。</p><p>先问个问题，你认为安踏是什么时候超越李宁的？</p><p><strong>2009年，安踏市值第一次超越李宁，2011年，安踏全年营收第一次超过李宁。但这都只是资本层面上。</strong></p><p><img src="https://pic2.zhimg.com/50/v2-575bc3afc67724f46ad5fc160a6fca4e_hd.jpg?source=1940ef5c" alt=""></p><p>既然聊的是第一品牌，那么安踏与李宁的交接，应该是在2012年伦敦奥运会上。</p><p>我上一期内容里提到，安踏是个喜欢留伏笔的公司。</p><p>2009年，阿迪达斯和中国奥委会的合约期满，中国奥委会开始寻找下一任合作伙伴。<strong>北京奥运会热潮后，国内对奥运的关注就开始下降了，因此很多人都不看好伦敦奥运的营销价值。</strong></p><p>我自己推测，当年如日中天的李宁怕是飘了，也没铁了心想夺回中国代表团的赞助权。</p><p><strong>最终，安踏战胜了李宁等一众竞争者，以6亿元的价格，拿下了中国代表团。这个价格比08北京奥运的赞助权价格缩水了一半还不止。</strong></p><p><img src="https://pic2.zhimg.com/50/v2-f39c984fd8d8fd71457f9a45c96f3c22_hd.jpg?source=1940ef5c" alt=""></p><p>这笔2009年的签约，获得回报的时间正是2012年。</p><p>营销是一场关乎心智的战斗。<strong>安踏想要取代李宁，就要给受众打下思想钢印：安踏才是真国牌。</strong></p><p><img src="https://pic1.zhimg.com/50/v2-7146c0936e6ac37b7d423d3c804aa693_hd.jpg?source=1940ef5c" alt=""></p><p>就在李宁帝国风雨飘摇之时，安踏这却代表中国登上了伦敦奥运的舞台，<strong>大势所趋，人心向背</strong>，这一手埋了四年的伏笔，可谓是趁你病要你命。</p><p>简单分析一下，李宁长期和中国代表团合作，早已奠定了民族品牌的身份，赞助多一届少一届对李宁早已无所谓。<strong>但对安踏来说，这次的签约尤为重要。</strong></p><p><img src="https://pic3.zhimg.com/50/v2-e31a5b41d95bc35ab66bd9bae247a459_hd.jpg?source=1940ef5c" alt=""></p><p>打个不恰当的比方，中国代表团的赞助权，就如同传国玉玺一样。只有赞助过中国代表团，自称中国第一运动品牌，才符合道统。</p><p>这个权益，从1992年开始，李宁就没让别家染指过。唯一的例外是北京奥运败给阿迪达斯，但那毕竟是外国品牌，血统上就不是自家人。</p><p><img src="https://pic3.zhimg.com/50/v2-c48bad8764de8b295a1a647ca583ca9d_hd.jpg?source=1940ef5c" alt=""></p><p><strong>但此时的安踏兵强马壮，在资本市场已经碾压李宁，再加上拿下中国代表团的赞助权，毫无争议地完成了国牌称号的交接。</strong></p><p>尽管2012年伦敦奥运，并没有带来符合投入的回报，但安踏早已经不在乎一次赞助的得失。王朝更迭，安踏已经获得了他想要的一切。</p><p><img src="https://pic4.zhimg.com/50/v2-25bc14a8af0554d451eb7d1a2f4ed0bd_hd.jpg?source=1940ef5c" alt=""></p><p>穷小子上位以后，并没有被胜利冲昏头脑，依然视李宁为顽固的对手。</p><p>前面的内容，我们提到安踏很早就展开了终端回购计划，投入巨额资金将大量门店收归旗下，改为直营。</p><p><img src="https://pic1.zhimg.com/50/v2-6f0d7d5fca95296c108cf864715a9435_hd.jpg?source=1940ef5c" alt=""></p><p>安踏的直营模式，比依赖经销商的李宁模式更灵活，对市场变化和消费者诉求更敏感，也就不容易积压库存。</p><p>凭借这一手伏笔，安踏率先从席卷行业的库存危机里走了出来，此时荷包满满的安踏，有底气和李宁正面打一场营销战了。</p><p>先出手的，是在伦敦奥运上被安踏偷了老家，颜面无光的李宁。</p><p>2012年，为了找回市场存在感，也为了解决品牌危机，李宁豪掷5年20亿，从安踏手中夺过了CBA官方战略合作伙伴的赞助权。又砸下10年1亿美元签约NBA球星<strong>德韦恩·韦德</strong>。</p><p><img src="https://pic4.zhimg.com/50/v2-0a33437f297b19cf8927b6bd0f159783_hd.jpg?source=1940ef5c" alt=""></p><p>此时的安踏已经比李宁更豪横，尔要战，便战。</p><p><strong>2013年，安踏反手就续费了中国奥委会，拿下了里约奥运的赞助权。</strong></p><p><strong>同一年，李宁不甘示弱，把被安踏夺走了11年的CUBA重新抢了回来。</strong></p><p>安踏表示：你拿去吧，反正我也不是特别想要。第二年，安踏拿下了曾一度属于李宁的NBA官方市场合作伙伴。</p><p><strong>下一年，安踏又签下了NBA球星克莱·汤普森。</strong>签约4个月后，汤普森就以核心之一身份拿下NBA总冠军，替安踏好好地出了一次风头。之后「汤神模式」、「要疯」系列广告片，也成为了安踏营销的里程碑。</p><p><img src="https://pic2.zhimg.com/50/v2-ec065d9b9262ff41b4f1d78ac7864d11_hd.jpg?source=1940ef5c" alt=""></p><p><strong>更讽刺的是，李宁先生本人的老东家中国体操队，在2014年也被安踏花了5000万抢走。</strong></p><p>这一波已经不是偷家了，简直就是大摇大摆走到你家水晶泉水里发射人民币。</p><p>把钱全花在了篮球等核心项目的李宁，再也无力和安踏竞价。</p><p>据内部人士透露，李宁公司甚至通过体操中心和安踏进行沟通，表示可以让出蹦床和艺术体操，但希望能留下体操队的权益。不过在商言商，被安踏一口回绝。</p><p>李宁低到尘埃里，落难凤凰不如鸡啊。</p><p><img src="https://pic2.zhimg.com/50/v2-33157472db07099cfdf514fc792865d7_hd.jpg?source=1940ef5c" alt=""></p><p>但商业世界里，竞争就是如此残酷，你的任何失误，都会成为对手蚕食你的契机。<strong>两家公司市值相差最多的时候，安踏一年能赚李宁两倍的钱，市值抵得上8个李宁。</strong></p><p>从品牌层面来说，体育品牌的营销从来就不仅是打广告这么简单。</p><p><strong>一次分量十足的代言，就能让品牌弯道超车，知名度提升几个档次。一次声势浩大的赞助，就能让品牌确立自己的江湖地位。</strong></p><p>正如1984年，濒临倒闭的Nike，用一份近乎赌命的大合同，把前途放在了初出茅庐的乔丹身上，结果一把翻盘，最终在篮球领域，把曾经的行业老大阿迪达斯踩在了脚下。</p><p><img src="https://pic1.zhimg.com/50/v2-eec60c29f01c2eb0ffafa658bd3a753f_hd.jpg?source=1940ef5c" alt=""></p><p><strong>而如今日薄西山的阿迪达斯，在足球领域依然有着不输耐克的存在感，原因就是它少而精的赞助策略，</strong>拿下了皇马、拜仁、曼联、阿森纳、尤文图斯等顶级俱乐部，让阿迪依旧维持着顶级足球品牌的尊严。</p><p><strong>安踏做的也是同样的事情，从孔令辉到CBA再到奥运会和NBA，安踏用不断升级的赞助和代言，一步步确立了如今的地位。</strong></p><p><strong>第六章：新的战场</strong></p><p>安踏和李宁不断升级加码的竞争，背后是老牌帝国阿迪逐渐掉队。</p><p>从90年代起，阿迪和耐克两大巨头就一直齐头并进，你收购一个匡威，我就买下一个锐步，针锋相对互不相让。</p><p><img src="https://pic4.zhimg.com/50/v2-966832f41de91c8502f9eb08ba319164_hd.jpg?source=1940ef5c" alt=""></p><p>但2010年开始，阿迪陷入了停滞不前，而耐克的一波爆发式增长，让这个乱世从双雄并立，立刻成为了一超多强的军阀混战。</p><p>到2014年，耐克在美国运动服装市场的市场占有率，达到了阿迪的5倍多。</p><p><img src="https://pic3.zhimg.com/50/v2-9fc6cb98cf52cfaf34bf4d6d46ef3b2b_hd.jpg?source=1940ef5c" alt=""></p><p>阿迪掉队了，意味着每个品牌都有了上位的机会。</p><p>第一个发难的是UnderArmour，这个从健身服这个细分领域起家的品牌，销售额增长连续26个季度超过20%，终于在2014年销售额超过阿迪，坐上了行业的第二把交椅。</p><p><img src="https://picb.zhimg.com/50/v2-0fb1959885d89bdccf905c6774f17264_hd.jpg?source=1940ef5c" alt=""></p><p>但好景不长，旗下代言人史蒂芬·库里之后在NBA总决赛的败北，让这个异军突起的品牌的的缺点一下子暴露了：在运动鞋品类布局单薄。加上设计感实在太差，UnderArmour的时代很快就过去了。</p><p><img src="https://pic1.zhimg.com/50/v2-d9f1051a937a86693b1c7f50a441cae8_hd.jpg?source=1940ef5c" alt=""></p><p>另一个来自细分领域起家的挑战者，主营瑜伽裤的lululemon。今年年初疫情期间，lululemon逆市增长，股价一度接近400亿美元，直逼耐克。</p><p><img src="https://pic1.zhimg.com/50/v2-98512b5d7ee1bf6ae9729deae6d48e83_hd.jpg?source=1940ef5c" alt=""></p><p>除此之外，Vans和耐克旗下的AirJordan也曾经在部分市场和部分主要品类上超越过阿迪达斯。</p><p><strong>可以说，整个体育品牌市场都打成了一锅粥了，遍地是小王，短暂又辉煌。就连耐克这个大王的钓鱼台都几次险些翻车。</strong></p><p>阿迪达斯可能是过去十年最惨的行业老二，明明长着一张老二的脸，却总是坐在老三的位置。</p><p><img src="https://pic4.zhimg.com/50/v2-bd783f54386a0fcb0390c3cc61f51c63_hd.jpg?source=1940ef5c" alt=""></p><p>但如果从另一个侧面看，众多品牌来来去去，崛起又衰落，谁都没能长期地取代阿迪达斯，挑战耐克。</p><p>虽然细分领域品牌的崛起是大势所趋，但像lululemon、UnderArmour这样的品牌，只有单一品类。靠着爆款异军突起容易，想要建立帝国，却是几乎不可能的。</p><p><strong>只有一条腿的品牌，也许能跳得高，但是绝对站不稳。</strong></p><p>能取代帝国的，只有另一个帝国，在我看来，过去十年，真正有机会取代阿迪达斯的，只有<strong>李宁和安踏</strong>这两个中国品牌。</p><p><img src="https://pic3.zhimg.com/50/v2-e4c12398071941f4c52b0f8053a43cde_hd.jpg?source=1940ef5c" alt=""></p><p><strong>因为这两个品牌，涵盖了鞋类和服装，涵盖了各种主流运动品类，且具备了足够的规模。</strong></p><p><img src="https://pic4.zhimg.com/50/v2-ed5cbc260c2525a75e36d4ea0cbcb172_hd.jpg?source=1940ef5c" alt=""></p><p>简单说，李宁和安踏长着一张帝国的脸。</p><p><strong>2019年，安踏的市值一度达到过2104亿港元，大幅超过阿迪达斯，位居世界第二，就很能说明问题。</strong></p><p><img src="https://pic3.zhimg.com/50/v2-d93945ffa1cfdb9801a70a26c5811392_hd.jpg?source=1940ef5c" alt=""></p><p>从这个角度，再来理解李宁和安踏的战争，就有了一层更深的涵义。</p><p><strong>中国人有品牌情结，创造一个属于中国的世界一流品牌，不仅是一代创业家的梦想，也是许多国人的梦想。</strong></p><p>反正都要有一个来自中国的顶级品牌，为什么不能是我呢？</p><p>故事回到李宁。</p><p>这家公司正忙于收拾「90后李宁」战略失误造成的烂摊子，完全无力对抗步步紧逼的安踏。<strong>国际战略失败后，李宁回缩到国内市场，才发现自己在销售渠道的「内功」上，也远远不及安踏。</strong></p><p>狂澜既倒，大厦将倾，这是李宁的至暗时刻，<strong>甚至更换了两任CEO都不见成效。</strong></p><p>有媒体采访到李宁员工说：「碰到这种状况，如果不是李宁，早就死了不知多少次了」。</p><p>终于，2014年到了，这是李宁的幸运年。</p><p><strong>这一年，李宁本人决定重新出山执掌公司。在他复出的第一年，李宁也终于扭亏为盈，再次走上正轨。</strong></p><p><img src="https://pic3.zhimg.com/50/v2-7aed76f77b08220d8c70e89bc02839d9_hd.jpg?source=1940ef5c" alt=""></p><p>更重要的变化，发生在外部。</p><p><strong>2014年开始，运动时尚化的新风潮席卷了整个行业。</strong></p><p>2014年，阿迪达斯旗下休闲款单品「小白鞋」<strong>Stan Smith</strong>被时尚圈带火，成为了明星潮人们人脚一双的时尚单品。</p><p><img src="https://pic1.zhimg.com/50/v2-1d27f32626d09ee8e934b4b7d0ec7bea_hd.jpg?source=1940ef5c" alt=""></p><p>2015年更是疯狂的一年，阿迪达斯旗下鞋款NMD发售，引发无数鞋迷和潮流爱好者抢购。</p><p><img src="https://pic3.zhimg.com/50/v2-788ca13a6f45cff6c19ba19d195cb4db_hd.jpg?source=1940ef5c" alt=""></p><p>虽然只是普普通通的一双跑鞋，阿迪达斯却邀请了陈冠希、陈奕迅、余文乐等艺人潮人抢先上脚带货。加上限量发售，一下子将这双鞋炒火了。</p><p><img src="https://pic2.zhimg.com/50/v2-30f39c69ed81d69a15b2e4c8575510b9_hd.jpg?source=1940ef5c" alt=""></p><p>另一边，阿迪达斯之前重金从耐克手里抢来了「侃爷」坎耶·韦斯特，2015年，侃爷和阿迪合作的第一款鞋adidas Yeezy Boost 750 OG「Light Grey」发售，<strong>从此椰子成了全世界潮流爱好者的圣物。</strong></p><p><strong>耐克的AirJordan系列也在这场运动品牌时尚化的大浪潮中成为了受益者</strong>，各种联名合作将AJ从一个高端运动鞋品牌改造成了一个顶级潮流品牌。</p><p><img src="https://pic4.zhimg.com/50/v2-a744acac78ea0247a1c36369962f04ff_hd.jpg?source=1940ef5c" alt=""></p><p>这场风潮席卷的不只是运动品牌和潮流圈，传统时尚圈也没能置身其外。</p><p>巴黎世家的老爹鞋，Guuci各类运动风单品，LV开始和潮牌玩联名。<strong>可以说整个服装行业都看到了一波新的机会。</strong></p><p><img src="https://pic2.zhimg.com/50/v2-fbadac2e129241e54ca63d7d017e38d3_hd.jpg?source=1940ef5c" alt=""></p><p>李宁找到了它的救命稻草。</p><p>谁也没想到，李宁的逆袭，没有发生在赛场上，而是在2018年初的纽约时装周。</p><p><strong>在李宁举办的大秀上，中国李宁的logo伴随着时尚的设计，引爆了社交网络，向全世界宣告，这个品牌已经脱胎换骨了。</strong></p><p><img src="https://pic3.zhimg.com/50/v2-6df052030636b06d28b9606df38c1e9b_hd.jpg?source=1940ef5c" alt=""></p><p>也许这是商业之神和李宁开的一个不大不小的玩笑。</p><p>曾经在国内品牌中，论设计，论中国风，论品牌底蕴，几乎没有能和李宁抗衡的。</p><p>经典的「飞甲」、「年轮」、「钟馗」球鞋融入了中国风。</p><p><img src="https://pic2.zhimg.com/50/v2-ef45b9007c82b63e3743386e9b91d304_hd.jpg?source=1940ef5c" alt=""></p><p>「驭帅」系列、「韦德之道」系列至今还是中国历史上最成功的两大系列球鞋。「弓」和「弧」等各种科技也被运用到跑鞋、球鞋等产品上。</p><p><img src="https://pic3.zhimg.com/50/v2-db0aa3718e8a1a50dafc8d9f80e44a68_hd.jpg?source=1940ef5c" alt=""></p><p><strong>可以说，李宁用品牌底蕴和美学功底，把自己的产品和晋江系一众「旅游鞋」区别了开来。</strong></p><p><strong>高端品牌，卖的就是文化附加值。耐克励志广告，阿迪时尚气息，都是在为品牌附加值。</strong>民族设计和历史底蕴，是李宁特有的文化附加值，是李宁冲击高端的突破口，但「90后李宁」为了讨好新一代，过于激进，以至于自废武功。</p><p>可能就连管理层自己也没有想到，8年前他们削尖了脑袋想挤进年轻人的世界而不得，<strong>如今却是当年自己弃之如敝屣的本土元素和复古底蕴，让自己完成了年轻化，而且一举走向高端。</strong></p><p><img src="https://pic4.zhimg.com/50/v2-ee64b88377a3b5b7d26240d286600f35_hd.jpg?source=1940ef5c" alt=""></p><p>历史的进程总是不可捉摸。</p><p><strong>但如今强势归来的李宁，发现横亘在它面前的早已不是单打独斗的穷小子，而是坐拥一个2200亿市值的体育品牌帝国。</strong></p><p>这已经是这十年来，双方最为势均力敌的瞬间了。</p><p>我们又终于可以看到两个属于中国的顶尖品牌，站在差不多的起跑线上，为了争夺市场各出奇招，在产品上不断迭代。</p><p><img src="https://pic1.zhimg.com/50/v2-d34a6b5675be3fc96e2812ed47b24519_hd.jpg?source=1940ef5c" alt=""></p><p>因为有了竞争和悬念，体育才变得如此激动人心，而也正是因为有了品牌之间的竞争，才有了市场的进化。<strong>也许安踏和李宁的竞争，会给整个体育行业带来又一个黄金时代。</strong></p><p><strong>这场充满悬念的消费战争，也许才刚刚开始。</strong></p><p><strong>参考资料：</strong></p><p>《李宁，三十而已》-懒熊体育</p><p>《安踏，永不止步》-王新磊</p><p>《“90后”李宁打造出国际化品牌—变革与创新之痛》-新浪教育</p><p>《安踏闪耀CBA赛场 成为运动装备类唯一合作伙伴》-搜狐体育</p><p>《李宁：二十八年的兴衰之路》-广发证券</p><p>《李宁公司成长史：一切皆有可能》-馒头</p><p>转载-<a href="https://www.zhihu.com/question/37296063">知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要&lt;/p&gt;
&lt;p&gt;有时候在正确的时候做正确的决定，是更关键的事情              &lt;/p&gt;
&lt;p&gt;生活中不缺乏机遇，你的层次越高，眼见越高，看见的机遇越多&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="决策" scheme="zzdespair.github.io/tags/%E5%86%B3%E7%AD%96/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 笔记</title>
    <link href="zzdespair.github.io/2020/08/06/Elasticsearch-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <id>zzdespair.github.io/2020/08/06/Elasticsearch-%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-06T09:14:31.000Z</published>
    <updated>2020-09-02T07:13:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要</p><p>因最近项目需求，开始使用Elasticsearch。</p><p>因此遇到不少坑，和不习惯的地方，本篇文章不定期更新，主要用作笔记和记录</p><a id="more"></a></blockquote><h1 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h1><p>此处省略</p><h1 id="Elasticsearch-基本使用"><a href="#Elasticsearch-基本使用" class="headerlink" title="Elasticsearch 基本使用"></a>Elasticsearch 基本使用</h1><h2 id="启动-Elasticsearch"><a href="#启动-Elasticsearch" class="headerlink" title="启动 Elasticsearch"></a>启动 Elasticsearch</h2><p>输入一下指令开启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart elasticsearch.service</span><br></pre></td></tr></table></figure><p>本地环境是Mac下搭建的Homestead环境，内核信息如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux version 4.15.0-96-generic (buildd@lgw01-amd64-004) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020</span><br></pre></td></tr></table></figure><h2 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h2><p>创建最简单的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT "localhost:9200/customer/_doc/1?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "name": "John Doe"</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>Es所有Api访问方式都是Http访问，所以使用curl方式连接和传输数据</p><p>如果该请求<code>customer</code>尚不存在，此请求将自动创建该索引，添加ID为的新文档<code>1</code>，并存储该<code>name</code>字段并为其建立索引。</p><p>由于这是一个新文档，因此响应显示该操作的结果是创建了该文档的版本1：</p><p>返回体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;customer&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 2,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 26,</span><br><span class="line">  &quot;_primary_term&quot; : 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新文档可立即从群集中的任何节点使用。您可以使用指定文档ID的GET请求检索它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/customer/_doc/1?pretty"</span><br></pre></td></tr></table></figure><p>该响应表明找到了具有指定ID的文档，并显示了已索引的原始源字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">26</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span> : &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"John Doe"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量添加文件"><a href="#批量添加文件" class="headerlink" title="批量添加文件"></a>批量添加文件</h2><p>如果您有很多要添加的文档，则可以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.8/docs-bulk.html">批量API</a>批量提交。使用批量处理批处理文档操作比单独提交请求要快得多，因为它可以最大程度地减少网络往返次数。</p><blockquote><p>最佳批处理大小取决于许多因素：文档大小和复杂性，索引编制和搜索负载以及群集可用的资源。一个好的起点是批处理1,000至5,000个文档，总有效负载在5MB至15MB之间。从那里，您可以尝试找到最佳位置。</p></blockquote><p>要将一些数据导入Elasticsearch，您可以开始搜索和分析：</p><ol><li>下载<a href="https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json?raw=true"><code>accounts.json</code></a>样本数据集。此随机生成的数据集中的文档代表具有以下信息的用户帐户：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"account_number"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"balance"</span>: <span class="number">16623</span>,</span><br><span class="line">  <span class="attr">"firstname"</span>: <span class="string">"Bradshaw"</span>,</span><br><span class="line">  <span class="attr">"lastname"</span>: <span class="string">"Mckenzie"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="attr">"gender"</span>: <span class="string">"F"</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"244 Columbus Place"</span>,</span><br><span class="line">  <span class="attr">"employer"</span>: <span class="string">"Euron"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"bradshawmckenzie@euron.com"</span>,</span><br><span class="line">  <span class="attr">"city"</span>: <span class="string">"Hobucken"</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"CO"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>bank</code>使用以下<code>_bulk</code>请求将帐户数据添加到索引中：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H "Content-Type: application/json" -XPOST "localhost:9200/bank/_bulk?pretty&amp;refresh" --data-binary "@accounts.json" </span><br><span class="line"></span><br><span class="line">curl "localhost:9200/_cat/indices?v"</span><br></pre></td></tr></table></figure><p>响应表明成功添加了1,000个文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   bank  l7sSYV2cQXmu6_4rJWVIww   5   1       1000            0    128.6kb        128.6kb</span><br></pre></td></tr></table></figure><h2 id="开始搜索"><a href="#开始搜索" class="headerlink" title="开始搜索"></a>开始搜索</h2><p>将一些数据摄取到Elasticsearch索引后，您可以通过将请求发送到<code>_search</code>端点来对其进行搜索。要访问全套搜索功能，请使用Elasticsearch Query DSL在请求正文中指定搜索条件。您可以在请求URI中指定要搜索的索引的名称。</p><p>例如，以下请求检索<code>bank</code> 按帐号排序的索引中的所有文档：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123; "match_all": &#123;&#125; &#125;,</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123; "account_number": "asc" &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>默认情况下，<code>hits</code>响应部分包括与搜索条件匹配的前10个文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">63</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"bank"</span>,</span><br><span class="line">      <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"0"</span>,</span><br><span class="line">      <span class="attr">"sort"</span>: [<span class="number">0</span>],</span><br><span class="line">      <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"_source"</span> : &#123;<span class="attr">"account_number"</span>:<span class="number">0</span>,<span class="attr">"balance"</span>:<span class="number">16623</span>,<span class="attr">"firstname"</span>:<span class="string">"Bradshaw"</span>,<span class="attr">"lastname"</span>:<span class="string">"Mckenzie"</span>,<span class="attr">"age"</span>:<span class="number">29</span>,<span class="attr">"gender"</span>:<span class="string">"F"</span>,<span class="attr">"address"</span>:<span class="string">"244 Columbus Place"</span>,<span class="attr">"employer"</span>:<span class="string">"Euron"</span>,<span class="attr">"email"</span>:<span class="string">"bradshawmckenzie@euron.com"</span>,<span class="attr">"city"</span>:<span class="string">"Hobucken"</span>,<span class="attr">"state"</span>:<span class="string">"CO"</span>&#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"bank"</span>,</span><br><span class="line">      <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"sort"</span>: [<span class="number">1</span>],</span><br><span class="line">      <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"_source"</span> : &#123;<span class="attr">"account_number"</span>:<span class="number">1</span>,<span class="attr">"balance"</span>:<span class="number">39225</span>,<span class="attr">"firstname"</span>:<span class="string">"Amber"</span>,<span class="attr">"lastname"</span>:<span class="string">"Duke"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"gender"</span>:<span class="string">"M"</span>,<span class="attr">"address"</span>:<span class="string">"880 Holmes Lane"</span>,<span class="attr">"employer"</span>:<span class="string">"Pyrami"</span>,<span class="attr">"email"</span>:<span class="string">"amberduke@pyrami.com"</span>,<span class="attr">"city"</span>:<span class="string">"Brogan"</span>,<span class="attr">"state"</span>:<span class="string">"IL"</span>&#125;</span><br><span class="line">    &#125;, ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该响应还提供有关搜索请求的以下信息：</p><ul><li><code>took</code> – Elasticsearch运行查询所需的时间（以毫秒为单位）</li><li><code>timed_out</code> –搜索请求是否超时</li><li><code>_shards</code> –搜索了多少个分片，以及成功，失败或跳过了多少个分片。</li><li><code>max_score</code> –找到的最相关文件的分数</li><li><code>hits.total.value</code> -找到了多少个匹配的文档</li><li><code>hits.sort</code> -文档的排序位置（不按相关性得分排序时）</li><li><code>hits._score</code>-文档的相关性得分（使用时不适用<code>match_all</code>）</li></ul><p>每个搜索请求都是独立的：Elasticsearch不会在请求中维护任何状态信息。要翻阅搜索结果，请在您的请求中指定<code>from</code>和<code>size</code>参数。</p><p>例如，以下请求的匹配数为10到19：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123; "match_all": &#123;&#125; &#125;,</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123; "account_number": "asc" &#125;</span><br><span class="line">  ],</span><br><span class="line">  "from": 10,</span><br><span class="line">  "size": 10</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>现在，您已经了解了如何提交基本的搜索请求，可以开始构建比有趣的查询<code>match_all</code>。</p><p>要在字段中搜索特定术语，可以使用<code>match</code>查询。例如，以下请求搜索该<code>address</code>字段以查找地址包含<code>mill</code>或的客户<code>lane</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123; "match": &#123; "address": "mill lane" &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>要执行词组搜索而不是匹配单个词，请使用 <code>match_phrase</code>代替<code>match</code>。例如，以下请求仅匹配包含短语的地址<code>mill lane</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123; "match_phrase": &#123; "address": "mill lane" &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>要构造更复杂的查询，可以使用<code>bool</code>查询来组合多个查询条件。您可以根据需要（必须匹配），期望（应匹配）或不期望（必须不匹配）指定条件。</p><p>例如，以下请求在<code>bank</code>索引中搜索属于40岁客户的帐户，但不包括居住在爱达荷州（ID）的任何人：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123; "match": &#123; "age": "40" &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      "must_not": [</span><br><span class="line">        &#123; "match": &#123; "state": "ID" &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>布尔查询中的每个<code>must</code>，<code>should</code>和<code>must_not</code>元素称为查询子句。文档满足每个条款<code>must</code>或 <code>should</code>条款的标准的程度有助于文档的<em>相关性得分</em>。分数越高，文档就越符合您的搜索条件。默认情况下，Elasticsearch返回按这些相关性分数排名的文档。</p><p><code>must_not</code>子句中的条件被视为<em>过滤器</em>。它影响文件是否包含在结果中，但不会影响文件的评分方式。您还可以显式指定任意过滤器，以基于结构化数据包括或排除文档。</p><p>例如，以下请求使用范围过滤器将结果限制为余额在20,000美元到30,000美元（含）之间的帐户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": &#123; "match_all": &#123;&#125; &#125;,</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "range": &#123;</span><br><span class="line">          "balance": &#123;</span><br><span class="line">            "gte": 20000,</span><br><span class="line">            "lte": 30000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><h2 id="使用聚合"><a href="#使用聚合" class="headerlink" title="使用聚合"></a>使用聚合</h2><p>Elasticsearch聚合使您能够获取有关搜索结果的元信息，并回答诸如“德克萨斯州有多少个帐户持有人？”之类的问题。或“田纳西州的平均帐户余额是多少？” 您可以在一个请求中搜索文档，过滤命中并使用汇总分析结果。</p><p>例如，以下请求使用<code>terms</code>汇总将<code>bank</code>索引中的所有帐户按状态分组，并按降序返回帐户数量最多的十个州：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_state": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "state.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p><code>buckets</code>响应中的是的值<code>state</code>字段中。该 <code>doc_count</code>节目在每个州帐户数量。例如，您可以看到<code>ID</code>（爱达荷州）有27个帐户。因为请求set <code>size=0</code>，所以响应仅包含聚合结果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">     <span class="attr">"total"</span> : &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">     &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"group_by_state"</span> : &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">770</span>,</span><br><span class="line">      <span class="attr">"buckets"</span> : [ &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"ID"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">27</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"TX"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">27</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"AL"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">25</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"MD"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">25</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"TN"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">23</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"MA"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">21</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"NC"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">21</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"ND"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">21</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"ME"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">20</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="string">"MO"</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">20</span></span><br><span class="line">      &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以组合聚合以构建更复杂的数据汇总。例如，以下请求将一个<code>avg</code>聚合嵌套在先前的 <code>group_by_state</code>聚合中，以计算每个状态的平均帐户余额。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_state": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "state.keyword"</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "average_balance": &#123;</span><br><span class="line">          "avg": &#123;</span><br><span class="line">            "field": "balance"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>您可以通过指定<code>terms</code>聚合内的顺序来使用嵌套聚合的结果进行排序，而不是按计数对结果进行排序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_state": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "state.keyword",</span><br><span class="line">        "order": &#123;</span><br><span class="line">          "average_balance": "desc"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "average_balance": &#123;</span><br><span class="line">          "avg": &#123;</span><br><span class="line">            "field": "balance"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p>除了这些基本的存储桶和指标聚合外，Elasticsearch还提供了专门的聚合，用于在多个字段上操作并分析特定类型的数据，例如日期，IP地址和地理数据。您还可以将单个聚合的结果馈送到管道聚合中，以进行进一步分析。</p><p>聚合提供的核心分析功能可启用高级功能，例如使用机器学习来检测异常。</p><h1 id="Elasticsearch-搜索"><a href="#Elasticsearch-搜索" class="headerlink" title="Elasticsearch 搜索"></a>Elasticsearch 搜索</h1><h2 id="URL搜索"><a href="#URL搜索" class="headerlink" title="URL搜索"></a>URL搜索</h2><p>通过查询参数提供查询。URI搜索往往更简单，最适合测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/my-index-000001/_search?q=user.id:kimchy&amp;pretty"</span><br></pre></td></tr></table></figure><p>转换为DSL搜索就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/my-index-000001,my-index-000002/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "user.id": "kimchy"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><h2 id="Request-body-searches-DSL搜索"><a href="#Request-body-searches-DSL搜索" class="headerlink" title="Request body searches (DSL搜索)"></a>Request body searches (DSL搜索)</h2><p>通过API请求的JSON主体提供查询。这些查询是用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">查询DSL</a>编写的。在日常项目开发中请求正文搜索是重中之重。</p><h3 id="source-过滤字段"><a href="#source-过滤字段" class="headerlink" title="_source 过滤字段"></a>_source 过滤字段</h3><p>默认情况下，搜索响应中的每个<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html"><code>_source</code></a>匹配都包含document ，这是对文档建立索引时提供的整个JSON对象。如果在搜索响应中仅需要某些源字段，则可以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-fields.html#source-filtering">源过滤</a>来限制返回源的哪些部分。</p><p>仅使用文档源返回字段有一些限制：</p><ul><li>该<code>_source</code>字段不包含<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-fields.html">多字段</a>或 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/alias.html">字段别名</a>。同样，源中的字段也不包含使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/copy-to.html"><code>copy_to</code></a>映射参数复制的值。</li><li>由于<code>_source</code>在lucene中将_s存储为单个字段，因此即使仅需要少量字段，也必须加载和解析整个源对象。</li></ul><p>为避免这些限制，您可以：</p><ul><li>使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-fields.html#docvalue-fields"><code>docvalue_fields</code></a> 参数获取选定字段的值。当返回相当少量的支持doc值的字段（例如关键字和日期）时，这是一个不错的选择。</li><li>使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-fields.html#stored-fields"><code>stored_fields</code></a>参数获取特定存储字段的值。（使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-store.html"><code>store</code></a>映射选项的字段。）</li></ul><p>使用场景：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/_search?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "_source": &#123;</span><br><span class="line">    "includes": [ "obj1.*", "obj2.*" ],</span><br><span class="line">    "excludes": [ "*.description" ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "user.id": "kimchy"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><table><thead><tr><th>名词</th><th>解释</th></tr></thead><tbody><tr><td>_source</td><td>源过滤    若传值为false，不返回全部资源</td></tr><tr><td>includes</td><td>则仅返回与其模式之一匹配的源字段</td></tr><tr><td>excludes</td><td>从子集中排除字段</td></tr></tbody></table><h3 id="aggs-聚合"><a href="#aggs-聚合" class="headerlink" title="aggs 聚合"></a>aggs 聚合</h3><p>聚合功能为ES注入了统计分析的血统，使用户在面对<a href="http://lib.csdn.net/base/hadoop">大数据</a>提取统计指标时变得游刃有余。聚合允许我们向数据提出一些複杂的问题，虽然他的功能完全不同于搜索，但他们其实使用了相同的数据结构，这表示聚合的执行速度很快，并且就像搜索一样几乎是实时的。</p><p>聚合的两个主要的概念，分别是 桶 和 指标</p><ul><li>桶(Buckets) : 满足特定条件的文档的集合<ul><li>当聚合开始被执行，每个文档会决定符合哪个桶的条件，如果匹配到，文档将放入相应的桶并接着进行聚合操作<ul><li>像是一个员工属于男性桶或者女性桶，日期2014-10-28属于十月桶，也属于2014年桶</li></ul></li><li>桶可以被嵌套在其他桶里面<ul><li>像是北京能放在中国桶裡，而中国桶能放在亚洲桶裡</li></ul></li><li>Elasticsearch提供了很多种类型的桶，像是时间、最受欢迎的词、年龄区间、地理位置桶等等，不过他们在根本上都是通过同样的原理进行操作，也就是基于条件来划分文档，一个文档只要符合条件，就可以加入那个桶，因此一个文档可以同时加入很多桶</li></ul></li><li>指标(Metrics) : 对桶内的文档进行统计计算<ul><li>桶能让我们划分文档到有意义的集合， 但是最终我们需要的是对这些桶内的文档进行一些指标的计算</li><li>指标通常是简单的数学运算(像是min、max、avg、sum），而这些是通过当前桶中的文档的值来计算的，利用指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据</li></ul></li></ul><p>aggs 聚合的模板</p><ul><li>当query和aggs一起存在时，会先执行query的主查询，主查询query执行完后会搜出一批结果，而这些结果才会被拿去aggs拿去做聚合<ul><li>另外要注意aggs后面会先接一层自定义的这个聚合的名字，然后才是接上要使用的聚合桶</li><li>如果有些情况不在意查询结果是什麽，而只在意aggs的结果，可以把size设为0，如此可以让返回的hits结果集是0，加快返回的速度</li></ul></li><li>一个aggs裡可以有很多个聚合，每个聚合彼此间都是独立的，因此可以一个聚合拿来统计数量、一个聚合拿来分析数据、一个聚合拿来计算标准差…，让一次搜索就可以把想要做的事情一次做完<ul><li>像是此例就定义了3个聚合，分别是custom_name1、custom_name2、custom_name3</li></ul></li><li>aggs可以嵌套在其他的aggs裡面，而嵌套的桶能作用的文档集范围，是外层的桶所输出的结果集 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/mytest/doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"custom_name1"</span>: &#123;   <span class="comment">// aggs后面接著的是一个自定义的name</span></span><br><span class="line">            <span class="string">"桶"</span>: &#123; ... &#125;    <span class="comment">// 再来才是接桶</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"custom_name2"</span>: &#123;   <span class="comment">// 一个aggs裡可以有很多聚合</span></span><br><span class="line">            <span class="string">"桶"</span>: &#123; ... &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"custom_name3"</span>: &#123;</span><br><span class="line">            <span class="string">"桶"</span>: &#123;</span><br><span class="line">               .....</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"aggs"</span>: &#123;   <span class="comment">// aggs可以嵌套在别的aggs裡面</span></span><br><span class="line">                <span class="string">"in_name"</span>: &#123;  <span class="comment">// 记得使用aggs需要先自定义一个name</span></span><br><span class="line">                    <span class="string">"桶"</span>: &#123; ... &#125;  <span class="comment">// in_name的桶作用的文档是custom_name3的桶的结果</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">      <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"hits"</span>: [] <span class="comment">//因为size设为0，所以没有查询结果返回</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">      <span class="attr">"custom_name1"</span>: &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;,</span><br><span class="line">      "custom_name2": &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;,</span><br><span class="line">      "custom_name3": &#123;</span><br><span class="line">          ... ,</span><br><span class="line">          "in_name": &#123;</span><br><span class="line">             ....</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>完整例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">GET /metric.*/_search  <span class="comment">// 指定index查询</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>:<span class="number">0</span>,        <span class="comment">// 返回数限定0</span></span><br><span class="line">  <span class="string">"aggs"</span>: &#123; <span class="comment">// 聚合开启关键字，固定格式</span></span><br><span class="line">    <span class="string">"2"</span>: &#123;<span class="comment">// 对这个聚合起名字</span></span><br><span class="line">      <span class="string">"date_histogram"</span>: &#123;<span class="comment">// 这个聚合的类型 ，这里是时间直方图聚合</span></span><br><span class="line">        <span class="string">"fixed_interval"</span>: <span class="string">"1d"</span>,<span class="comment">// 该聚合类型内的关键字，在各个类型内有详解</span></span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"datetime"</span>,</span><br><span class="line">        <span class="string">"min_doc_count"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"time_zone"</span>: <span class="string">"Asia/Shanghai"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;----</span><br><span class="line">        <span class="string">"avg_grade"</span>: &#123;|</span><br><span class="line">          <span class="string">"avg"</span>: &#123;|</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"value"</span>|</span><br><span class="line">          &#125;  |</span><br><span class="line">        &#125;,|</span><br><span class="line">        <span class="string">"max_price"</span>: &#123; |</span><br><span class="line">            <span class="string">"max"</span>: &#123;|--&gt; <span class="comment">// 针对上面聚合后产生的文档，再次进行聚合操作</span></span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"value"</span>|</span><br><span class="line">            &#125;|</span><br><span class="line">        &#125;,|</span><br><span class="line">        <span class="string">"min_price"</span>: &#123; |</span><br><span class="line">            <span class="string">"min"</span>: &#123;|</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"value"</span>|</span><br><span class="line">            &#125;|</span><br><span class="line">        &#125;|</span><br><span class="line">      &#125;                                         ----</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//"3": &#123;&#125;                          ---</span></span><br><span class="line">    <span class="comment">//"4": &#123;  &#125;| --&gt; // 对文档进行其他聚合</span></span><br><span class="line">    <span class="comment">//"5": &#123;  &#125;---</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"_source"</span>: &#123;<span class="comment">// 过滤设置</span></span><br><span class="line">    <span class="string">"includes"</span>: [</span><br><span class="line">      <span class="string">"value"</span>,</span><br><span class="line">      <span class="string">"datetime"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"excludes"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="comment">// 查询</span></span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"filter"</span>: &#123;</span><br><span class="line">        <span class="string">"range"</span>: &#123;</span><br><span class="line">          <span class="string">"datetime"</span>: &#123;</span><br><span class="line">            <span class="string">"time_zone"</span>: <span class="string">"Asia/Shanghai"</span>,</span><br><span class="line">            <span class="string">"format"</span>:<span class="string">"yyyy-MM-dd HH:mm:ss"</span>,</span><br><span class="line">            <span class="string">"gte"</span>: <span class="string">"2020-07-28 19:46:08"</span>,</span><br><span class="line">            <span class="string">"lte"</span>: <span class="string">"2020-07-31 20:46:08"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"sname"</span>: <span class="string">"gwaf_monitor_srv"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"mname"</span>: <span class="string">"server_monitor"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"iname"</span>: <span class="string">"mem"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"sort"</span>: [<span class="comment">// 排序</span></span><br><span class="line">    &#123; <span class="string">"datetime"</span>: <span class="string">"asc"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">3012</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"2"</span> : &#123;</span><br><span class="line">      <span class="attr">"buckets"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"2020-07-29 00:00:00"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">1595952000000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1175</span>,</span><br><span class="line">          <span class="attr">"max_price"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">292276.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"min_price"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">5144.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_grade"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">13365.889361702128</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"2020-07-30 00:00:00"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">1596038400000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1432</span>,</span><br><span class="line">          <span class="attr">"max_price"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">188092.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"min_price"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">5436.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_grade"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">10735.731843575419</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"2020-07-31 00:00:00"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">1596124800000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">405</span>,</span><br><span class="line">          <span class="attr">"max_price"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">23408.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"min_price"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">5648.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_grade"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">9392.266666666666</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用桶"><a href="#常用桶" class="headerlink" title="常用桶"></a>常用桶</h4><h5 id="terms-桶"><a href="#terms-桶" class="headerlink" title="terms 桶"></a>terms 桶</h5><p>针对某个field的值进行分组，field有几种值就分成几组</p><ul><li>terms桶在进行分组时，会爲此field中的每种值创建一个新的桶</li><li>要注意此 “terms桶” 和平常用在主查询query中的 “查找terms” 是不同的东西</li></ul><p>具体实例，先插入数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"color"</span>: <span class="string">"red"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"color"</span>: <span class="string">"green"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"color"</span>: [<span class="string">"red"</span>, <span class="string">"blue"</span>] &#125;</span><br></pre></td></tr></table></figure><p>执行搜索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/mytest/doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"my_name"</span>: &#123;</span><br><span class="line">            <span class="string">"terms"</span>: &#123;</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"color"</span>   <span class="comment">// 使用color来进行分组</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>terms</code>聚合应该是字段类型<code>keyword</code>或适用于存储桶聚合的任何其他数据类型。为了与它一起使用，<code>text</code>您将需要启用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/fielddata.html">fielddata</a></li></ul><p>结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "my_name": &#123;</span><br><span class="line">        "doc_count_error_upper_bound": 0,</span><br><span class="line">        "sum_other_doc_count": 0,</span><br><span class="line">        "buckets": [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">2</span>  <span class="comment">//表示color为red的文档有2个，此例中就是 &#123;"color": "red"&#125; 和 &#123;"color": ["red", "blue"]&#125;这两个文档</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为color总共有3种值，red、blue、green，所以terms桶为他们产生了3个bucket，并计算了每个bucket中符合的文档有哪些</li><li>bucket和bucket间是独立的，也就是说一个文档可以同时符合好几个bucket，像是<code>{&quot;color&quot;: [&quot;red&quot;, &quot;blue&quot;]}</code>就同时符合了red和blue bucket</li></ul><table><thead><tr><th>参数</th><th>解释</th><th>例子</th></tr></thead><tbody><tr><td>field</td><td>分组依据</td><td>“field”: “color”</td></tr><tr><td>order</td><td>可根据 _count, _key 使用 asc,desc  或者聚合名词 例1</td><td>“order”: { “_count”: “asc” }</td></tr><tr><td>min_doc_count</td><td>最小文件数</td><td>“min_doc_count”: 10</td></tr><tr><td>missing</td><td>将缺少参数赋予值</td><td>“missing”: “N/A”</td></tr></tbody></table><p>order例子 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"genres"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"genre"</span>,</span><br><span class="line">        <span class="string">"order"</span>: &#123; <span class="string">"max_play_count"</span>: <span class="string">"desc"</span> &#125;  </span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"max_play_count"</span>: &#123; <span class="string">"max"</span>: &#123; <span class="string">"field"</span>: <span class="string">"play_count"</span> &#125; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"genres"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"genre"</span>,</span><br><span class="line">        <span class="string">"order"</span>: &#123; <span class="string">"playback_stats.max"</span>: <span class="string">"desc"</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"playback_stats"</span>: &#123; <span class="string">"stats"</span>: &#123; <span class="string">"field"</span>: <span class="string">"play_count"</span> &#125; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>order其他的高阶用方法参考官方文档<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html">ES官方文档-aggs-order</a></p><h5 id="date-histogram-日期直方图"><a href="#date-histogram-日期直方图" class="headerlink" title="date_histogram 日期直方图"></a>date_histogram 日期直方图</h5><p>例如，以下是一个汇总，要求在日历时间中每个月的存储分区间隔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /sales/_search?size=<span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"sales_over_time"</span>: &#123;</span><br><span class="line">      <span class="string">"date_histogram"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"date"</span>,    <span class="comment">// 数据中字段名</span></span><br><span class="line">        <span class="string">"calendar_interval"</span>: <span class="string">"month"</span>    <span class="comment">// 间隔时间</span></span><br><span class="line">      <span class="comment">//"fixed_interval": "30d"      固定间隔时间  与calendar_interval同级，不可同时使用</span></span><br><span class="line">        <span class="string">"format"</span>: <span class="string">"yyyy-MM-dd"</span>        <span class="comment">// 指定时间格式</span></span><br><span class="line">        <span class="string">"time_zone"</span>: <span class="string">"Asia/Shanghai"</span>  <span class="comment">// 时区调整</span></span><br><span class="line">        <span class="string">"offset"</span>:    <span class="string">"+6h"</span>            <span class="comment">// 从上午六点开始分组</span></span><br><span class="line">        <span class="string">"min_doc_count"</span>: <span class="number">0</span>,           <span class="comment">// 为空的话则填充0</span></span><br><span class="line">        <span class="string">"extended_bounds"</span>: &#123;<span class="comment">// 需要填充0的范围</span></span><br><span class="line">          <span class="string">"min"</span>: <span class="number">1533556800000</span>,</span><br><span class="line">          <span class="string">"max"</span>: <span class="number">1533806520000</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>calendar_interval 参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>minute (</strong><code>1m</code><strong>)</strong></td><td>分钟</td></tr><tr><td><strong>hour (</strong><code>1h</code><strong>)</strong></td><td>小时</td></tr><tr><td><strong>day (</strong><code>1d</code><strong>)</strong></td><td>天</td></tr><tr><td><strong>week (</strong><code>1w</code><strong>)</strong></td><td>周</td></tr><tr><td><strong>month (</strong><code>1M</code><strong>)</strong></td><td>月</td></tr><tr><td><strong>quarter (</strong><code>1q</code><strong>)</strong></td><td>季</td></tr><tr><td><strong>year (</strong><code>1y</code><strong>)</strong></td><td>年</td></tr></tbody></table><ul><li>fixed_interval 是固定间隔时间</li></ul><p>与日历感知间隔相比，固定间隔是固定数量的SI单位，并且永远不会偏离，无论它们位于日历上的哪个位置。一秒始终由1000毫秒组成。这允许以任意多个受支持单位指定固定间隔。</p><p>但是，这意味着固定的时间间隔不能表示其他单位，例如月份，因为一个月的持续时间不是固定的数量。尝试指定日历间隔（例如月份或季度）将引发异常。</p><table><thead><tr><th>fixed_interval 参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>milliseconds (ms)</strong></td><td>毫秒</td></tr><tr><td><strong>seconds (s)</strong></td><td>定义为1000毫秒</td></tr><tr><td><strong>hours (h)</strong></td><td>所有时间都是从00分00秒开始。定义为每个60分钟（3,600,000毫秒）</td></tr><tr><td><strong>days (d)</strong></td><td>所有时间都是从最早的时间开始，通常是00:00:00（午夜）。定义为24小时（86,400,000毫秒）</td></tr></tbody></table><h5 id="histogram-直方图"><a href="#histogram-直方图" class="headerlink" title="histogram 直方图"></a>histogram 直方图</h5><p>执行汇总时，将评估每个文档的价格字段并将其四舍五入到最接近的存储桶-例如，如果价格为<code>32</code>且存储桶大小为，<code>5</code>则四舍五入将产生结果<code>30</code>，因此文档将“落入”与密钥关联的桶<code>30</code>。为了使它更加正式，这里使用了舍入函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bucket_key = Math.floor((value - offset) / interval) * interval + offset</span><br></pre></td></tr></table></figure><p><code>interval</code>必须是正的小数，而<code>offset</code>必须在小数<code>[0, interval)</code> （小数大于或等于<code>0</code>且小于<code>interval</code>）</p><p>以下代码段根据产品的“ <code>price</code>间隔”对产品进行“存储桶” <code>50</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /sales/_search?size=<span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"prices"</span>: &#123;</span><br><span class="line">      <span class="string">"histogram"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="string">"interval"</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">"extended_bounds"</span>: &#123;   <span class="comment">//限定范围</span></span><br><span class="line">          <span class="string">"min"</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="string">"max"</span>: <span class="number">500</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "prices": &#123;</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">0.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">50.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">100.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">150.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">200.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用指标聚合"><a href="#常用指标聚合" class="headerlink" title="常用指标聚合"></a>常用指标聚合</h4><h5 id="avg-平均值"><a href="#avg-平均值" class="headerlink" title="avg 平均值"></a>avg 平均值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /exams/_search?size=<span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"avg_grade"</span>: &#123; <span class="string">"avg"</span>: &#123; <span class="string">"field"</span>: <span class="string">"grade"</span> &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "avg_grade": &#123;</span><br><span class="line">      "value": 75.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="max-最大值"><a href="#max-最大值" class="headerlink" title="max 最大值"></a>max 最大值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /sales/_search?size=<span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"max_price"</span>: &#123; <span class="string">"max"</span>: &#123; <span class="string">"field"</span>: <span class="string">"price"</span> &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">      "max_price": &#123;</span><br><span class="line">          "value": 200.0</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="min-最小值"><a href="#min-最小值" class="headerlink" title="min 最小值"></a>min 最小值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /sales/_search?size=<span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"min_price"</span>: &#123; <span class="string">"min"</span>: &#123; <span class="string">"field"</span>: <span class="string">"price"</span> &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "min_price": &#123;</span><br><span class="line">      "value": 10.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sum-总和"><a href="#sum-总和" class="headerlink" title="sum 总和"></a>sum 总和</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /sales/_search?size=<span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="string">"filter"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span>: &#123; <span class="string">"type"</span>: <span class="string">"hat"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"hat_prices"</span>: &#123; <span class="string">"sum"</span>: &#123; <span class="string">"field"</span>: <span class="string">"price"</span> &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "hat_prices": &#123;</span><br><span class="line">      "value": 450.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="median-absolute-deviation-中位数"><a href="#median-absolute-deviation-中位数" class="headerlink" title="median_absolute_deviation 中位数"></a>median_absolute_deviation 中位数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET reviews/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"review_average"</span>: &#123;</span><br><span class="line">      <span class="string">"avg"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"rating"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"review_variability"</span>: &#123;</span><br><span class="line">      <span class="string">"median_absolute_deviation"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"rating"</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "review_average": &#123;</span><br><span class="line">      "value": 3.0</span><br><span class="line">    &#125;,</span><br><span class="line">    "review_variability": &#123;</span><br><span class="line">      "value": 2.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Query-DSL搜索"><a href="#Query-DSL搜索" class="headerlink" title="Query DSL搜索"></a>Query DSL搜索</h3><p>es的Query DSL以_search为endpoint，主要分为叶子查询语句（Leaf Query) 和 复合查询语句 (Compound query clauses)。</p><h4 id="叶子查询语句（Leaf-Query"><a href="#叶子查询语句（Leaf-Query" class="headerlink" title="叶子查询语句（Leaf Query)"></a><strong>叶子查询语句（Leaf Query)</strong></h4><p>  用于查询某个特定的字段，如 <code>match</code> , <code>term</code> 或 <code>range</code> 等<br>  其中主要包括两类：单词匹配和全文匹配:</p><h5 id="单词匹配-Term-Level-Query"><a href="#单词匹配-Term-Level-Query" class="headerlink" title="单词匹配(Term Level Query)"></a><strong>单词匹配(Term Level Query)</strong></h5><p>不对查询语句进行分词处理，直接匹配该字段的倒排索引，包括term、terms、range查询语句:</p><h6 id="term-query"><a href="#term-query" class="headerlink" title="term query"></a>term query</h6><p>term查询语句不会对查询语句进行分词处理，直接拿查询输入的文本去检索，如下是官方文档测试案例，非常清晰:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"exact_value"</span>: <span class="string">"Quick Foxes!"</span>   <span class="comment">//如果exact_value字段类型是keyword，则有结果，若为text则无结果</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="terms-query"><a href="#terms-query" class="headerlink" title="terms query"></a>terms query</h6><p>返回在提供的字段中包含一个或多个<strong>确切</strong>术语的文档。该<code>terms</code>查询与<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html"><code>term</code>查询</a>相同，除了可以搜索多个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"terms"</span>: &#123;</span><br><span class="line">      <span class="string">"user.id"</span>: [ <span class="string">"kimchy"</span>, <span class="string">"elkbee"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 同时支持文档源的查询</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong><code>index</code></strong></td><td>（必需，字符串）从中获取字段值的索引名称。</td></tr><tr><td><strong><code>id</code></strong></td><td>（必需，字符串）要从中获取字段值的文档的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html">ID</a>。</td></tr><tr><td><strong><code>path</code></strong></td><td>（必需，字符串）要从中获取字段值的字段名称。Elasticsearch将这些值用作查询的搜索词。如果字段值包含嵌套的内部对象的数组，则可以使用点表示法语法访问这些对象。</td></tr><tr><td><strong><code>routing</code></strong></td><td>（可选，字符串）从中获取术语值的文档的自定义<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-routing-field.html">路由</a>值。如果在为文档建立索引时提供了自定义路由值，则此参数是必需的。</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-<span class="number">000001</span>/_search?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"color"</span> : &#123;</span><br><span class="line">            <span class="string">"index"</span> : <span class="string">"my-index-000001"</span>,</span><br><span class="line">            <span class="string">"id"</span> : <span class="string">"2"</span>,</span><br><span class="line">            <span class="string">"path"</span> : <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="range-query"><a href="#range-query" class="headerlink" title="range query"></a>range query</h6><p>范围查询主要用于date或number类型的字段查询中，和term、terms查询一样，不进行查询时分词:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;</span><br><span class="line">      <span class="string">"age"</span>: &#123;</span><br><span class="line">        <span class="string">"gte"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"lte"</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">"boost"</span>: <span class="number">2.0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>gt</strong></td><td>（可选）大于</td></tr><tr><td><strong>gte</strong></td><td>（可选）大于或等于</td></tr><tr><td><strong>lt</strong></td><td>（可选）小于</td></tr><tr><td><strong>lte</strong></td><td>（可选）小于或等于</td></tr><tr><td><strong>format</strong></td><td>（可选，字符串）用于转换<code>date</code>查询中的值的日期格式。有关有效语法，请参见<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html"><code>format</code></a>。</td></tr><tr><td><strong>time_zone</strong></td><td>（可选，字符串） 用于将查询中的值转换为UTC的<a href="https://en.wikipedia.org/wiki/List_of_UTC_time_offsets">协调世界时（UTC）偏移量</a>或 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">IANA时区</a><code>date</code>。</td></tr><tr><td><strong>boost</strong></td><td>（可选，float）浮点数，用于降低或增加查询的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html#relevance-scores">相关性分数</a>。默认为<code>1.0</code></td></tr></tbody></table><p>在range范围查询中，es提供了一种更加简便的日期计算，now表示当前时间，时间单位y:年，M:月，d:天，H:时，m:分，s:秒，所以now-3y就表示当前时间减去3年后的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;</span><br><span class="line">      <span class="string">"timestamp"</span>: &#123;</span><br><span class="line">        <span class="string">"time_zone"</span>: <span class="string">"+01:00"</span>,        </span><br><span class="line">        <span class="string">"gte"</span>: <span class="string">"2020-01-01T00:00:00"</span>, </span><br><span class="line">        <span class="string">"lte"</span>: <span class="string">"now"</span>                  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="prefix-query-词项前缀查询"><a href="#prefix-query-词项前缀查询" class="headerlink" title="prefix query 词项前缀查询"></a>prefix query 词项前缀查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123; <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"prefix"</span> : &#123; <span class="string">"user"</span> : <span class="string">"ki"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="wildcard-query-通配符查询"><a href="#wildcard-query-通配符查询" class="headerlink" title="wildcard query 通配符查询"></a>wildcard query 通配符查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"wildcard"</span> : &#123; <span class="string">"user"</span> : <span class="string">"ki*y"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"wildcard"</span>: &#123;</span><br><span class="line">      <span class="string">"user"</span>: &#123;</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"ki*y"</span>,</span><br><span class="line">        <span class="string">"boost"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="regexp-query-正则查询"><a href="#regexp-query-正则查询" class="headerlink" title="regexp query 正则查询"></a>regexp query 正则查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"regexp"</span>:&#123;</span><br><span class="line">            <span class="string">"name.first"</span>: <span class="string">"s.*y"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"regexp"</span>:&#123;</span><br><span class="line">            <span class="string">"name.first"</span>:&#123;</span><br><span class="line">                <span class="string">"value"</span>:<span class="string">"s.*y"</span>,</span><br><span class="line">                <span class="string">"boost"</span>:<span class="number">1.2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则语法参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax</a></p><h6 id="fuzzy-query-模糊查询"><a href="#fuzzy-query-模糊查询" class="headerlink" title="fuzzy query 模糊查询"></a>fuzzy query 模糊查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">       <span class="string">"fuzzy"</span> : &#123; <span class="string">"user"</span> : <span class="string">"ki"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"fuzzy"</span> : &#123;</span><br><span class="line">            <span class="string">"user"</span> : &#123;</span><br><span class="line">                <span class="string">"value"</span>: <span class="string">"ki"</span>,</span><br><span class="line">                <span class="string">"boost"</span>: <span class="number">1.0</span>,</span><br><span class="line">                <span class="string">"fuzziness"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="string">"prefix_length"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">"max_expansions"</span>: <span class="number">100</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ids-根据文档id查询"><a href="#ids-根据文档id查询" class="headerlink" title="ids 根据文档id查询"></a>ids 根据文档id查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"ids"</span> : &#123;</span><br><span class="line">            <span class="string">"type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">            <span class="string">"values"</span> : [<span class="string">"1"</span>, <span class="string">"4"</span>, <span class="string">"100"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全文匹配-Full-Text-Query"><a href="#全文匹配-Full-Text-Query" class="headerlink" title="全文匹配(Full Text Query)"></a><strong>全文匹配(Full Text Query)</strong></h4><p>对指定的text类型的字段进行全文检索，会先对查询语句进行分词处理，例如你输入的查询文本是”我在马路边”，es在分词器的作用下就会分词为”我”、”在”、”马路”这么几个单词，然后再去匹配。</p><h6 id="match-query"><a href="#match-query" class="headerlink" title="match query"></a><strong>match query</strong></h6><p>match query是最基本的基于全文检索的字段类查询语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"message"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"this is a test"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这里经过分词后的this、is、a、test各个单词之间就是默认为”或”的匹配关系，可以通过operator关键字来显式设置各个单词间的匹配关系，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"message"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"this is a test"</span>,</span><br><span class="line">        <span class="string">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过minimum_should_match参数来设置控制需要匹配的单词数，比如你的文档里username存的内容是”this is a java enginer”，那么通过下面的查询语句可以控制查询文本最少要匹配到”java”、”enginer”:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"message"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"java enginer"</span>,</span><br><span class="line">        <span class="string">"minimum_should_match"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可用max_expansions 指定模糊匹配的最大词项数，默认是50。比如：反向索引中有 100 个词项与 ucen 模糊匹配，只选用前50 个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET ftq/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"content"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"ucen elatic java"</span>,</span><br><span class="line">        <span class="string">"fuzziness"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"minimum_should_match"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"max_expansions "</span>: <span class="number">50</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="match-phrase-query"><a href="#match-phrase-query" class="headerlink" title="match_phrase query"></a><strong>match_phrase query</strong></h6><p>match_phrase也是对字段进行检索，和match的区别在于：match_query是有顺序要求的，而match是无序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"this is a test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过slop参数来控制单词之间的允许间隔:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="string">"message"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"this is a test"</span>,</span><br><span class="line">        <span class="string">"slop"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="multi-match-query"><a href="#multi-match-query" class="headerlink" title="multi match query"></a>multi match query</h6><p>如果你需要在多个字段上进行文本搜索，可用multi_match 。multi_match在 match的基础上支持对多个字段进行文本查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET ftq/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span> : &#123;</span><br><span class="line">      <span class="string">"query"</span>:    <span class="string">"lucene java"</span>, </span><br><span class="line">      <span class="string">"fields"</span>: [ <span class="string">"title"</span>, <span class="string">"content"</span> ] </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用*匹配多个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET ftq/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span> : &#123;</span><br><span class="line">      <span class="string">"query"</span>:    <span class="string">"lucene java"</span>, </span><br><span class="line">      <span class="string">"fields"</span>: [ <span class="string">"title"</span>, <span class="string">"cont*"</span> ] </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="query-string-query"><a href="#query-string-query" class="headerlink" title="query_string query"></a>query_string query</h6><p>可以使用<code>query_string</code>查询来创建复杂的搜索，其中包括通配符，跨多个字段的搜索等等。尽管用途广泛，但查询是严格的，如果查询字符串包含任何无效语法，则返回错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"(new york city) OR (big apple)"</span>,</span><br><span class="line">      <span class="string">"default_field"</span>: <span class="string">"content"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索多字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123;</span><br><span class="line">      <span class="string">"fields"</span>: [ <span class="string">"content"</span>, <span class="string">"name"</span> ],</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"this AND that"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复合查询语句-Compound-query-clauses"><a href="#复合查询语句-Compound-query-clauses" class="headerlink" title="复合查询语句 (Compound query clauses)"></a><strong>复合查询语句 (Compound query clauses)</strong></h3><p>  用于合并其他的叶查询或复合查询语句，也就是说复合语句之间可以嵌套，用来表示一个复杂的单一查询，类比mysql的where多条件查询，es的复合查询包括Constant Score Query、<strong>Bool Query</strong>、Dis Max Query、Function Score Query、Boosting Query，这里详细说一说用的比较多的Bool Query。</p><h6 id="Bool-Query"><a href="#Bool-Query" class="headerlink" title="Bool Query"></a>Bool Query</h6><p>Bool 查询用bool操作来组合多个查询字句为一个查询。 可用的关键字：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>must</td><td>根据must中的条件过滤文档，返回的结果文档必须严格匹配条件，会影响相关性算分</td></tr><tr><td>filter</td><td>根据must中的条件过滤文档，返回的结果文档必须严格匹配条件，和must不同的是，filter不会影响相关性算分</td></tr><tr><td>should</td><td>根据should中的条件进行筛选，返回的结果文档应该包含should的条件，影响相关性 算分</td></tr><tr><td>must_not</td><td>根据must_not中的条件过滤文档，返回的结果文档必须不包含must_not条件，会影响相关性算分</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span> : &#123;</span><br><span class="line">      <span class="string">"must"</span> : &#123;</span><br><span class="line">        <span class="string">"term"</span> : &#123; <span class="string">"user"</span> : <span class="string">"kimchy"</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"filter"</span>: &#123;</span><br><span class="line">        <span class="string">"term"</span> : &#123; <span class="string">"tag"</span> : <span class="string">"tech"</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"must_not"</span> : &#123;</span><br><span class="line">        <span class="string">"range"</span> : &#123;</span><br><span class="line">          <span class="string">"age"</span> : &#123; <span class="string">"gte"</span> : <span class="number">10</span>, <span class="string">"lte"</span> : <span class="number">20</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"should"</span> : [</span><br><span class="line">        &#123; <span class="string">"term"</span> : &#123; <span class="string">"tag"</span> : <span class="string">"wow"</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="string">"term"</span> : &#123; <span class="string">"tag"</span> : <span class="string">"elasticsearch"</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"minimum_should_match"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="string">"boost"</span> : <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、must、must_not、should支持数组，同时filter的查询语句，es会对其进行智能缓存，因此执行效率较高，在不需要算分的查询语句中，可以考虑使用filter替代普通的query语句;</p><p>2、查询语句同时包含must和should时，可以不满足should的条件，因为must条件优先级高于should，但是如果也满足should的条件，则会提高相关性算分;</p><p>3、可以使用minimum_should_match参数来控制应当满足条件的个数或百分比;</p><p>4、must、must_not语句里面如果包含多个条件，则各个条件间是且的关系，而should的多个条件是或的关系。</p><h3 id="Filter和Query的异同"><a href="#Filter和Query的异同" class="headerlink" title="Filter和Query的异同"></a>Filter和Query的异同</h3><p>一个查询语句究竟具有什么样的行为和得到什么结果，主要取决于它到底是处于查询上下文(Query Context) 还是过滤上下文(Filter Context)。</p><ul><li><strong>Query context 查询上下文</strong><br>这种语句在执行时既要计算文档是否匹配，还要计算文档相对于其他文档的匹配度有多高，匹配度越高，<em>_score</em> 分数就越高</li><li><strong>Filter context 过滤上下文</strong><br>过滤上下文中的语句在执行时只关心文档是否和查询匹配，不会计算匹配度，也就是得分。</li></ul><p>下面来看一个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;                                     <span class="comment">//参数表示整个语句是处于 query context 中</span></span><br><span class="line">    <span class="string">"bool"</span>: &#123; <span class="comment">//bool 和 match 语句被用在 query context 中，也就是说它们会计算每个文档的匹配度（_score)</span></span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Search"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: <span class="string">"Elasticsearch"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"filter"</span>: [ <span class="comment">//这个子查询处于 filter context 中</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"term"</span>: &#123; <span class="comment">//语句中的 term 和 range 语句用在 filter context 中，它们只起到过滤的作用，并不会计算文档的得分。</span></span><br><span class="line">            <span class="string">"status"</span>: <span class="string">"published"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"range"</span>: &#123;</span><br><span class="line">            <span class="string">"publish_date"</span>: &#123;</span><br><span class="line">              <span class="string">"gte"</span>: <span class="string">"2015-01-01"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>1 查询上下文中，查询操作不仅仅会进行查询，还会计算分值，用于确定相关度；在过滤器上下文中，查询操作仅判断是否满足查询条件</p><p>2 过滤器上下文中，查询的结果可以被缓存。</p><h1 id="Elasticsearch-Url地址说明"><a href="#Elasticsearch-Url地址说明" class="headerlink" title="Elasticsearch Url地址说明"></a>Elasticsearch Url地址说明</h1><p>拿以下添加内容命令举例说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT "localhost:9200/customer/_doc/1?pretty" -H 'Content-Type: application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">  "name": "John Doe"</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure><table><thead><tr><th>URL</th><th>说明</th></tr></thead><tbody><tr><td>Localhost</td><td>Es服务地址</td></tr><tr><td>/customer</td><td>index名，类似Mysql中的库名</td></tr><tr><td>/_doc</td><td>字段类型</td></tr><tr><td>/1</td><td>id 索引id</td></tr><tr><td>pretty</td><td>将返回的信息以可读的JSON形式返回。</td></tr><tr><td>“name”: “John Doe”</td><td>添加内容</td></tr></tbody></table><h2 id="常用URL句子"><a href="#常用URL句子" class="headerlink" title="常用URL句子"></a>常用URL句子</h2><ul><li><p>获得节集群中的节点列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 'xxx:9200/_cat/nodes?v'</span><br></pre></td></tr></table></figure></li><li><p>检查集群健康</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 'xxx:9200/_cat/health?v'</span><br></pre></td></tr></table></figure></li><li><p>列出所有的索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 'xxx:9200/_cat/indices?v'</span><br></pre></td></tr></table></figure></li><li><p>查看ES哪些进程在消耗资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl xxx:9200/_nodes/hot_threads?pretty</span><br></pre></td></tr></table></figure></li><li><p>查看某条语句的性能分析状况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl xxx:9200/xxx/_search?pretty -d '&#123;"profile": true, "query" : &#123; "match" : &#123; "xxx" : "xxx" &#125; &#125;&#125;'</span><br></pre></td></tr></table></figure></li><li><p>对某个index进行强制合并segment，提高查询效率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl xxx:9200/xxx/_forcemerge?pretty</span><br></pre></td></tr></table></figure></li><li><p>节点状态查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl xxx:9200/_nodes/stats?pretty</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用URL字段"><a href="#常用URL字段" class="headerlink" title="常用URL字段"></a>常用URL字段</h2><h3 id="index操作"><a href="#index操作" class="headerlink" title="index操作"></a>index操作</h3><p>默认之前必须携带index前缀，比如：  /customer/_search</p><table><thead><tr><th>URL</th><th>说明</th></tr></thead><tbody><tr><td>/_search</td><td>搜索</td></tr><tr><td>/_aliases</td><td>获取或操作索引的别名</td></tr><tr><td>/_count</td><td>返回符合条件的文档数</td></tr><tr><td>/type</td><td>创建或操作    类型</td></tr><tr><td>/_mapping</td><td>创建或操作    mapping</td></tr><tr><td>/_settings</td><td>创建或操作    设置  (number_of_shards是不可更改的)</td></tr><tr><td>/_open</td><td>打开被关闭的索引</td></tr><tr><td>/_close</td><td>关闭索引</td></tr><tr><td>/_refresh</td><td>刷新索引（使新加内容对搜索可见）</td></tr><tr><td>/_flush</td><td>刷新索引将变动提交到lucene索引文件中并清空elasticsearch的transaction log，与refresh的区别需要继续研究</td></tr><tr><td>/_optimize</td><td>优化segement，个人认为主要是对segement进行合并</td></tr><tr><td>/_status</td><td>获得索引的状态信息</td></tr><tr><td>/_segments</td><td>获得索引的segments的状态信息</td></tr><tr><td>/_explain</td><td>不执行实际搜索，而返回解释信息</td></tr><tr><td>/_analyze</td><td>不执行实际搜索，根据输入的参数进行文本分析</td></tr><tr><td>/index/type/id</td><td>操作指定文档</td></tr><tr><td>/index/type/id/_create</td><td>创建一个文档，如果该文件已经存在，则返回失败</td></tr><tr><td>/index/type/id/_update</td><td>更新一个文件，如果改文件不存在，则返回失败</td></tr></tbody></table><h3 id="Nodes操作"><a href="#Nodes操作" class="headerlink" title="Nodes操作"></a>Nodes操作</h3><table><thead><tr><th>URL</th><th>说明</th></tr></thead><tbody><tr><td>/_nodes/process</td><td>我主要看file descriptor 这个信息</td></tr><tr><td>/_nodes/process/stats</td><td>统计信息（内存、CPU能）</td></tr><tr><td>/_nodes/jvm</td><td>获得各节点的虚拟机统计和配置信息</td></tr><tr><td>/_nodes/jvm/stats</td><td>更详细的虚拟机信息</td></tr><tr><td>/_nodes/http</td><td>获得各个节点的http信息（如ip地址）</td></tr><tr><td>/_nodes/http/stats</td><td>获得各个节点处理http请求的统计情况</td></tr><tr><td>/_nodes/thread_pool</td><td>获得各种类型的线程池（elasticsearch分别对不同的操作提供不同的线程池）的配置信息</td></tr><tr><td>/_nodes/thread_pool/stats</td><td>获得各种类型的线程池的统计信息</td></tr></tbody></table><p>以上这些操作和可以通过如下方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">/_nodes/$</span><span class="bash">&#123;nodeId&#125;/jvm/stats</span></span><br><span class="line"></span><br><span class="line"><span class="meta">/_nodes/$</span><span class="bash">&#123;nodeip&#125;/jvm/stats</span></span><br><span class="line"></span><br><span class="line"><span class="meta">/_nodes/$</span><span class="bash">&#123;nodeattribute&#125;/jvm/stats</span></span><br></pre></td></tr></table></figure><p>针对指定节点的操作。</p><h3 id="Distributed操作"><a href="#Distributed操作" class="headerlink" title="Distributed操作"></a>Distributed操作</h3><table><thead><tr><th>URL</th><th>说明</th></tr></thead><tbody><tr><td>/_cluster/nodes</td><td>获得集群中的节点列表和信息</td></tr><tr><td>/_cluster/health</td><td>获得集群信息</td></tr><tr><td>/_cluster/state</td><td>获得集群里的所有信息（集群信息、节点信息、mapping信息等）</td></tr></tbody></table><h1 id="Elasticsearch-返回体说明"><a href="#Elasticsearch-返回体说明" class="headerlink" title="Elasticsearch 返回体说明"></a>Elasticsearch 返回体说明</h1><ul><li><code>took</code> – Elasticsearch运行查询所需的时间（以毫秒为单位）</li><li><code>timed_out</code> –搜索请求是否超时</li><li><code>_shards</code> –搜索了多少个分片，以及成功，失败或跳过了多少个分片。</li><li><code>max_score</code> –找到的最相关文件的分数</li><li><code>hits.total.value</code> -找到了多少个匹配的文档</li><li><code>hits.sort</code> -文档的排序位置（不按相关性得分排序时）</li><li><code>hits._score</code>-文档的相关性得分（使用时不适用<code>match_all</code>）</li></ul><h1 id="Elasticsearch-基本数据类型"><a href="#Elasticsearch-基本数据类型" class="headerlink" title="Elasticsearch 基本数据类型"></a>Elasticsearch 基本数据类型</h1><ul><li>字符串 string</li><li>数字类型 long integer double 等</li><li>日期 date</li><li>布尔类型 boolean</li><li>二进制 binary</li><li>复杂的数据类型<ul><li>数组类型</li><li>对象类型</li><li>嵌套类型 netsted</li><li>地理数据类型</li><li>专门数据类型<ul><li>ipv4</li><li>完成数据类型</li><li>单词计数类型</li></ul></li></ul></li></ul><p>参考文章:  </p><p><a href="https://www.jianshu.com/p/1fe6b4d92e87">ES的常规指令集合</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-index.html">ES官方文档</a></p><p><a href="https://blog.csdn.net/weixin_40341116/article/details/81173016">ES-聚合-aggs</a></p><p><a href="https://www.cnblogs.com/wangshouchang/p/8018537.html">ElasticSearch 系列文章</a></p><p><a href="https://blog.csdn.net/supermao1013/article/details/84261526">DSL介绍</a></p><p><a href="https://blog.csdn.net/fanrenxiang/article/details/86477019">Elastic Search之Search API(Query DSL)、字段类查询、复合查询</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要&lt;/p&gt;
&lt;p&gt;因最近项目需求，开始使用Elasticsearch。&lt;/p&gt;
&lt;p&gt;因此遇到不少坑，和不习惯的地方，本篇文章不定期更新，主要用作笔记和记录&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="zzdespair.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 初次使用记录</title>
    <link href="zzdespair.github.io/2020/08/04/hello-hexo/"/>
    <id>zzdespair.github.io/2020/08/04/hello-hexo/</id>
    <published>2020-08-04T10:13:02.000Z</published>
    <updated>2020-08-05T07:13:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提，首先需要安装两个软件："><a href="#安装前提，首先需要安装两个软件：" class="headerlink" title="安装前提，首先需要安装两个软件："></a>安装前提，首先需要安装两个软件：</h4><ol><li>Node.js        <font size=1>用于安装Hexo</font></li><li>Git                <font size=1>用于代码提交和外网访问</font></li></ol><p>详细的安装方式可自行根据自己的系统百度搜索安装方式，以下是参考网站：</p><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>以上两个软件装完后，即可通过npm安装Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>然后执行以下命令指定的文件下会自动创建所需要的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>运行完成后会出现如下文字：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>恭喜你，安装完成。</p><p>新建完后，指定文件夹下会出现的文件如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="初步使用Hexo"><a href="#初步使用Hexo" class="headerlink" title="初步使用Hexo"></a>初步使用Hexo</h3><h4 id="本地运行Hexo"><a href="#本地运行Hexo" class="headerlink" title="本地运行Hexo"></a>本地运行Hexo</h4><p>安装好后，执行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment">#generate 生成静态文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s <span class="comment">#server 启动服务器。默认情况下，访问网址为： [http://localhost:4000/](https://link.jianshu.com/?t=http://localhost:4000/)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>出现这段文字即可访问 <a href="http://localhost:4000/">http://localhost:4000</a> , 页面如下</p><p><img src="/images/Hexo%E9%A6%96%E9%A1%B5.jpg" alt=""></p><p>至此，本地Hexo搭建完成</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="string">"myblog"</span>   <span class="comment"># =&gt; hexo new "myblog"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo p            <span class="comment"># =&gt; hexo publish</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g            <span class="comment"># =&gt; hexo generate</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s            <span class="comment"># =&gt; hexo server</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d            <span class="comment"># =&gt; hexo deploy</span></span></span><br></pre></td></tr></table></figure><h4 id="服务器命令"><a href="#服务器命令" class="headerlink" title="服务器命令"></a>服务器命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server                   <span class="comment"># Hexo 会监视文件变动并自动更新，无须重启服务器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -s                <span class="comment"># 静态模式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -p 5000           <span class="comment"># 更改端口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -i 192.168.1.1    <span class="comment"># 自定义 IP</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean                    <span class="comment"># 清除缓存，网页正常情况下可以忽略此条命令</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g                        <span class="comment"># 生成静态网页</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d                        <span class="comment"># 开始部署</span></span></span><br></pre></td></tr></table></figure><h3 id="连接Hexo和Git"><a href="#连接Hexo和Git" class="headerlink" title="连接Hexo和Git"></a>连接Hexo和Git</h3><h4 id="Git-SSH配置"><a href="#Git-SSH配置" class="headerlink" title="Git SSH配置"></a>Git SSH配置</h4><h5 id="关于SSH"><a href="#关于SSH" class="headerlink" title="关于SSH"></a>关于SSH</h5><p>使用SSH协议，您可以连接到远程服务器和服务并进行身份验证。使用SSH密钥，您可以连接到GitHub，而无需在每次访问时都提供用户名或密码。</p><h5 id="检查现有的SSH密钥"><a href="#检查现有的SSH密钥" class="headerlink" title="检查现有的SSH密钥"></a>检查现有的SSH密钥</h5><p>以下是Mac操作系统：</p><ol><li><p>打开 Terminal.</p></li><li><p>输入<code>ls -al ~/.ssh</code>以查看是否存在现有的SSH密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lists the files <span class="keyword">in</span> your .ssh directory, <span class="keyword">if</span> they exist</span></span><br></pre></td></tr></table></figure></li><li><p>检查目录列表，以查看是否已经有公共SSH密钥。默认情况下，公共密钥的文件名是以下之一：</p><ul><li><em>id_rsa.pub</em></li><li><em>id_ecdsa.pub</em></li><li><em>id_ed25519.pub</em></li></ul></li></ol><p>如果您没有现有的公钥和私钥对，或者不希望使用任何可用于连接到GitHub，可以重新申请</p><p>如果您看到列出的现有公共和私有密钥对（例如<em>id_rsa.pub</em>和<em>id_rsa</em>），您希望将它们用于连接到GitHub，则可以将SSH密钥添加到ssh-agent。</p><h5 id="生成新的SSH密钥"><a href="#生成新的SSH密钥" class="headerlink" title="生成新的SSH密钥"></a>生成新的SSH密钥</h5><ol><li><p>打开终端。</p></li><li><p>粘贴以下文本，替换为您的GitHub电子邮件地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span></span><br></pre></td></tr></table></figure><p>使用提供的电子邮件作为标签，这将创建一个新的ssh密钥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Generating public/private rsa key pair.</span></span><br></pre></td></tr></table></figure></li><li><p>当提示您“输入要在其中保存密钥的文件”时，请按Enter。这接受默认文件位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span></span><br></pre></td></tr></table></figure></li><li><p>在提示符下，键入一个安全密码。有关更多信息，请参阅<a href="https://docs.github.com/en/articles/working-with-ssh-key-passphrases">“使用SSH密钥密码短语”</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter same passphrase again: [Type passphrase again]</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="将SSH密钥添加到ssh-agent"><a href="#将SSH密钥添加到ssh-agent" class="headerlink" title="将SSH密钥添加到ssh-agent"></a>将SSH密钥添加到ssh-agent</h5><p>在将新的SSH密钥添加到ssh-agent来管理密钥之前，您应该已经<a href="#检查现有的SSH密钥">检查了现有的SSH密钥</a>并<a href="#生成新的SSH密钥">生成了一个新的SSH密钥</a>。将SSH密钥添加到代理时，请使用默认的macOS <code>ssh-add</code>命令，而不要使用<a href="https://www.macports.org/">macports</a>，<a href="http://brew.sh/">homebrew</a>或其他一些外部源安装的应用程序。</p><ol><li><p>在后台启动ssh-agent。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Agent pid 59566</span></span><br></pre></td></tr></table></figure></li><li><p>如果您使用的是macOS Sierra 10.12.2或更高版本，则需要修改<code>~/.ssh/config</code>文件以将密钥自动加载到ssh-agent中并将密码短语存储在密钥链中。</p><ul><li><p>首先，检查<code>~/.ssh/config</code>文件是否存在于默认位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> open ~/.ssh/config</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> The file /Users/you/.ssh/config does not exist.</span></span><br></pre></td></tr></table></figure></li><li><p>如果文件不存在，请创建文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.ssh/config</span></span><br></pre></td></tr></table></figure></li><li><p>打开<code>~/.ssh/config</code>文件，然后修改文件，<code>~/.ssh/id_rsa</code>如果您没有使用默认位置和<code>id_rsa</code>密钥名称，则将其替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将您的SSH私钥添加到ssh-agent并将密码短语存储在钥匙串中。如果您使用其他名称创建密钥，或者要添加具有其他名称的现有密钥，请使用私有密钥文件的名称替换命令中的<em>id_rsa</em>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add -K ~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="GitHub账户添加新的SSH密钥"><a href="#GitHub账户添加新的SSH密钥" class="headerlink" title="GitHub账户添加新的SSH密钥"></a>GitHub账户添加新的SSH密钥</h5><p>在将新的SSH密钥添加到GitHub帐户之前，您应该具有：</p><ul><li><a href="#检查现有的SSH密钥">检查现有的SSH密钥</a></li><li><a href="#生成新的SSH密钥">生成一个新的SSH密钥并将其添加到ssh-agent</a></li></ul><p>将新的SSH密钥添加到GitHub帐户后，您可以重新配置任何本地存储库以使用SSH。有关更多信息，请参阅“将<a href="https://docs.github.com/en/articles/changing-a-remote-s-url/#switching-remote-urls-from-https-to-ssh">远程URL从HTTPS切换到SSH”</a>。</p><p><strong>注意：</strong>不再支持DSA密钥（SSH-DSS）。现有密钥将继续起作用，但是您不能将新的DSA密钥添加到GitHub帐户。</p><ol><li><p>将SSH密钥复制到剪贴板。</p><p>如果SSH密钥文件的名称与示例代码的名称不同，请修改文件名以匹配当前设置。复制密钥时，请勿添加任何换行符或空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pbcopy &lt; ~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copies the contents of the id_rsa.pub file to your clipboard</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong>如果<code>pbcopy</code>不起作用，则可以找到隐藏的<code>.ssh</code>文件夹，在您喜欢的文本编辑器中打开文件，然后将其复制到剪贴板。</p></li><li><p>在任何页面的右上角，点击您的个人资料照片，然后点击<strong>设置</strong>。</p><p><img src="https://docs.github.com/assets/images/help/settings/userbar-account-settings.png" alt="用户栏中的设置图标"></p></li></ol><ol start="3"><li><p>在用户设置边栏中，点击<strong>SSH和GPG密钥</strong>。</p><p><img src="https://docs.github.com/assets/images/help/settings/settings-sidebar-ssh-keys.png" alt="认证密钥"></p></li></ol><ol start="4"><li><p>单击“ <strong>新建SSH密钥”</strong>或“ <strong>添加SSH密钥”</strong>。</p><p><img src="https://docs.github.com/assets/images/help/settings/ssh-add-ssh-key.png" alt="SSH密钥按钮"></p></li></ol><ol start="5"><li><p>在“标题”字段中，为新密钥添加一个描述性标签。例如，如果您使用的是个人Mac，则可以将此键称为“个人MacBook Air”。</p></li><li><p>将您的密钥粘贴到“密钥”字段中。</p><p><img src="https://docs.github.com/assets/images/help/settings/ssh-key-paste.png" alt="关键领域"></p></li></ol><ol start="7"><li><p>单击<strong>添加SSH密钥</strong>。</p><p><img src="https://docs.github.com/assets/images/help/settings/ssh-add-key.png" alt="添加键按钮"></p></li></ol><ol start="8"><li><p>如果出现提示，请确认您的GitHub密码。</p><p><img src="https://docs.github.com/assets/images/help/settings/sudo_mode_popup.png" alt="Sudo模式对话框"></p></li></ol><h5 id="测试SSH连接"><a href="#测试SSH连接" class="headerlink" title="测试SSH连接"></a>测试SSH连接</h5><ol><li><p>打开终端。</p></li><li><p>输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure><p>您可能会看到如下警告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> The authenticity of host <span class="string">'github.com (IP ADDRESS)'</span> can<span class="string">'t be established.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>或像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> The authenticity of host <span class="string">'github.com (IP ADDRESS)'</span> can<span class="string">'t be established.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></li><li><p>验证您看到的消息中的指纹与步骤2中的消息之一匹配，然后键入<code>yes</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> provide shell access.</span></span><br></pre></td></tr></table></figure></li></ol><p>以上Git SSH部分全部配置完成。</p><h4 id="Git-仓库配置"><a href="#Git-仓库配置" class="headerlink" title="Git 仓库配置"></a>Git 仓库配置</h4><p>首先打开github，点击New repository，创建一个新仓库，仓库名必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README。如下图</p><p><img src="/images/git%E4%BB%93%E5%BA%931.jpg" alt=""></p><p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="https://picb.zhimg.com/80/v2-281f7ca404cbb2b769f09c34794ac5b6_1440w.jpg" alt="img"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="https://picb.zhimg.com/80/v2-3a0e46d3a6fa7e5ac9f585158cb76a88_1440w.jpg" alt="img"></p><p>以上Git仓库配置完毕！</p><h4 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h4><p>在安装Hexo的根目录下找到_config.yml文件，修改Deployment配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>   <span class="comment">#连接方式</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:zzdespair/zzdespair.github.io.git</span>  <span class="comment">#地址 在下载Code中能看到</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  <span class="comment">#选择分支 默认master 主分支</span></span><br></pre></td></tr></table></figure><p>Hexo部署到git我们需要安装<code>hexo-deployer-git</code>插件,在bHexo的根目录下运行一下命令进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开Hexo<code>\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>- [1] <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><p>- [2] <a href="https://www.jianshu.com/p/1bcad7700c46">简书-使用hexo搭建github博客</a></p><p>- [3] <a href="https://zhuanlan.zhihu.com/p/35668237">知乎-超详细Hexo+Github博客搭建小白教程</a></p><p>- [4] <a href="https://www.jianshu.com/p/6bbfa08aa0fa">简书-Hexo 搭建个人博客 #01 框架的本地安装与运行</a></p><p>- [5] <a href="https://www.fuocu.cn/archives/build-blog-website-by-hexo-github/">在本地搭建Hexo博客框架，并部署到Github</a></p><p>- [6] <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">Connecting to GitHub with SSH</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h4 id=&quot;安装前提，首先需要安装两个软件：&quot;&gt;&lt;a href=&quot;#安装前提，首先需要安装两个软件：&quot; class=&quot;headerlink&quot; title=&quot;安装前提，首先需要安装两个软件：&quot;&gt;&lt;/a&gt;安装前提，首先需要安装两个软件：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Node.js        &lt;font size=1&gt;用于安装Hexo&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;Git                &lt;font size=1&gt;用于代码提交和外网访问&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细的安装方式可自行根据自己的系统百度搜索安装方式，以下是参考网站：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;https://hexo.io/zh-cn/docs/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装-Hexo&quot;&gt;&lt;a href=&quot;#安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo&quot;&gt;&lt;/a&gt;安装 Hexo&lt;/h4&gt;&lt;p&gt;以上两个软件装完后，即可通过npm安装Hexo&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install -g hexo-cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Hexo" scheme="zzdespair.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="zzdespair.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="zzdespair.github.io/2020/08/04/hello-world/"/>
    <id>zzdespair.github.io/2020/08/04/hello-world/</id>
    <published>2020-08-04T10:07:34.555Z</published>
    <updated>2020-08-05T10:24:02.994Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
